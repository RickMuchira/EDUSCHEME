===== frontend/src/app/admin/test-delete/page.tsx =====
'use client'

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { EnhancedDeleteDialog, SimpleDeleteDialog } from '@/components/ui/enhanced-delete-dialog'
import { Trash2, AlertTriangle } from 'lucide-react'
import { toast } from 'sonner'

export default function DeleteTestPage() {
  // Enhanced dialog state
  const [enhancedDialogOpen, setEnhancedDialogOpen] = useState(false)
  const [deleteLoading, setDeleteLoading] = useState(false)
  
  // Simple dialog state
  const [simpleDialogOpen, setSimpleDialogOpen] = useState(false)
  const [simpleLoading, setSimpleLoading] = useState(false)
  
  // Sample items for testing
  const sampleTerm = {
    id: 1,
    name: "First Term",
    code: "TERM1",
    is_active: true,
    subjects_count: 3,
    display_order: 1
  }
  
  const sampleInactiveTerm = {
    id: 2,
    name: "Old Term",
    code: "OLD1",
    is_active: false,
    subjects_count: 0,
    display_order: 2
  }

  const handleEnhancedDelete = async (permanent: boolean) => {
    setDeleteLoading(true)
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    const deleteType = permanent ? 'permanently deleted' : 'deactivated'
    toast.success(`Term "${sampleTerm.name}" ${deleteType} successfully`)
    
    setDeleteLoading(false)
    setEnhancedDialogOpen(false)
  }

  const handleSimpleDelete = async () => {
    setSimpleLoading(true)
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1500))
    
    toast.success('Item deleted successfully')
    
    setSimpleLoading(false)
    setSimpleDialogOpen(false)
  }

  const testScenarios = [
    {
      title: "Active Term with Subjects",
      description: "Term that is currently active and has subjects",
      item: sampleTerm,
      buttonText: "Delete Active Term",
      variant: "destructive" as const
    },
    {
      title: "Inactive Term",
      description: "Term that is already inactive",
      item: sampleInactiveTerm,
      buttonText: "Delete Inactive Term",
      variant: "outline" as const
    }
  ]

  return (
    <div className="container mx-auto py-6 px-4">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          Delete Dialog Testing
        </h1>
        <p className="text-gray-600 dark:text-gray-400">
          Test different delete dialog scenarios and configurations
        </p>
      </div>

      <div className="grid gap-6">
        {/* Enhanced Delete Dialog Tests */}
        <Card>
          <CardHeader>
            <CardTitle>Enhanced Delete Dialog</CardTitle>
            <CardDescription>
              Full-featured delete dialog with soft/hard delete options
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4 md:grid-cols-2">
              {testScenarios.map((scenario, index) => (
                <Card key={index} className="border">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-lg">{scenario.title}</CardTitle>
                    <CardDescription>{scenario.description}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">Status:</span>
                        <Badge variant={scenario.item.is_active ? "default" : "secondary"}>
                          {scenario.item.is_active ? 'Active' : 'Inactive'}
                        </Badge>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">Subjects:</span>
                        <span>{scenario.item.subjects_count}</span>
                      </div>
                      <Button
                        variant={scenario.variant}
                        className="w-full"
                        onClick={() => setEnhancedDialogOpen(true)}
                      >
                        <Trash2 className="mr-2 h-4 w-4" />
                        {scenario.buttonText}
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Simple Delete Dialog Test */}
        <Card>
          <CardHeader>
            <CardTitle>Simple Delete Dialog</CardTitle>
            <CardDescription>
              Basic delete confirmation dialog for simple use cases
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="max-w-md">
              <Button
                variant="destructive"
                onClick={() => setSimpleDialogOpen(true)}
              >
                <Trash2 className="mr-2 h-4 w-4" />
                Test Simple Delete
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Features Overview */}
        <Card className="border-blue-200 bg-blue-50">
          <CardHeader>
            <CardTitle className="text-blue-800">✨ Enhanced Delete Features</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4 md:grid-cols-2">
              <div>
                <h4 className="font-medium text-blue-900 mb-2">Soft Delete (Deactivate)</h4>
                <ul className="space-y-1 text-sm text-blue-700">
                  <li>• Marks item as inactive</li>
                  <li>• Preserves all data</li>
                  <li>• Can be reactivated later</li>
                  <li>• Maintains relationships</li>
                  <li>• Recommended for most cases</li>
                </ul>
              </div>
              <div>
                <h4 className="font-medium text-blue-900 mb-2">Hard Delete (Permanent)</h4>
                <ul className="space-y-1 text-sm text-blue-700">
                  <li>• Completely removes item</li>
                  <li>• Cannot be undone</li>
                  <li>• May affect related data</li>
                  <li>• Use with caution</li>
                  <li>• For cleanup only</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Enhanced Delete Dialog */}
      <EnhancedDeleteDialog
        open={enhancedDialogOpen}
        onOpenChange={setEnhancedDialogOpen}
        onConfirm={handleEnhancedDelete}
        loading={deleteLoading}
        title="Delete Term"
        itemName={sampleTerm.name}
        itemType="term"
        isActive={sampleTerm.is_active}
        showSoftDeleteOption={true}
        showHardDeleteOption={true}
      >
        {/* Custom content for testing */}
        <div className="space-y-2">
          <h5 className="font-medium text-gray-900">Term Details:</h5>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-gray-600">Code:</span>
              <span className="ml-2 font-mono">{sampleTerm.code}</span>
            </div>
            <div>
              <span className="text-gray-600">Order:</span>
              <span className="ml-2">{sampleTerm.display_order}</span>
            </div>
            <div>
              <span className="text-gray-600">Status:</span>
              <span className={`ml-2 ${sampleTerm.is_active ? 'text-green-600' : 'text-gray-500'}`}>
                {sampleTerm.is_active ? 'Active' : 'Inactive'}
              </span>
            </div>
            <div>
              <span className="text-gray-600">Subjects:</span>
              <span className="ml-2">{sampleTerm.subjects_count}</span>
            </div>
          </div>
          
          {sampleTerm.subjects_count > 0 && (
            <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg mt-3">
              <div className="flex items-center space-x-2">
                <AlertTriangle className="h-4 w-4 text-yellow-600" />
                <span className="text-sm font-medium text-yellow-900">Contains Subjects</span>
              </div>
              <p className="text-sm text-yellow-700 mt-1">
                This term contains {sampleTerm.subjects_count} subject{sampleTerm.subjects_count !== 1 ? 's' : ''}. 
                Deleting this term may affect those subjects.
              </p>
            </div>
          )}
        </div>
      </EnhancedDeleteDialog>

      {/* Simple Delete Dialog */}
      <SimpleDeleteDialog
        open={simpleDialogOpen}
        onOpenChange={setSimpleDialogOpen}
        onConfirm={handleSimpleDelete}
        loading={simpleLoading}
        title="Delete Item"
        description="Are you sure you want to delete this item? This action cannot be undone."
        itemName="Test Item"
      />
    </div>
  )
}===== frontend/src/app/admin/subtopics/page.tsx =====
'use client'

import { useState, useEffect } from 'react'
import { useSearchParams } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  List, 
  Plus, 
  Search, 
  FileText,
  BookOpen,
  Calendar,
  GraduationCap,
  Eye,
  Edit,
  Trash2,
  Clock,
  Target,
  Users,
  AlertCircle,
  ArrowLeft,
  CheckSquare,
  PlayCircle,
  BookMarked
} from 'lucide-react'
import Link from 'next/link'
import { subtopicApi, topicApi } from '@/lib/api'

interface Topic {
  id: number
  title: string
  description: string
  duration_weeks: number
  subject: {
    id: number
    name: string
    code: string
    color: string
    term: {
      id: number
      name: string
      form_grade: {
        id: number
        name: string
        school_level: {
          id: number
          name: string
        }
      }
    }
  }
  is_active: boolean
}

interface Subtopic {
  id: number
  title: string
  content: string
  activities: any[]
  assessment_criteria: any[]
  resources: any[]
  duration_lessons: number
  display_order: number
  topic_id: number
  is_active: boolean
  created_at: string
  updated_at: string
  topic?: Topic
}

const SubtopicsPage = () => {
  const searchParams = useSearchParams()
  const preSelectedTopicId = searchParams.get('topic_id')
  
  const [topics, setTopics] = useState<Topic[]>([])
  const [subtopics, setSubtopics] = useState<Subtopic[]>([])
  const [selectedTopicId, setSelectedTopicId] = useState<number | null>(
    preSelectedTopicId ? parseInt(preSelectedTopicId) : null
  )
  const [filteredSubtopics, setFilteredSubtopics] = useState<Subtopic[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [activeTab, setActiveTab] = useState('all')

  useEffect(() => {
    fetchTopics()
    fetchSubtopics()
  }, [])

  useEffect(() => {
    filterSubtopics()
  }, [subtopics, selectedTopicId, searchTerm, activeTab])

  const fetchTopics = async () => {
    try {
      const response = await topicApi.getAll()
      setTopics(response.data || [])
    } catch (error) {
      console.error('Error fetching topics:', error)
    }
  }

  const fetchSubtopics = async () => {
    try {
      const response = await subtopicApi.getAll()
      setSubtopics(response.data || [])
    } catch (error) {
      console.error('Error fetching subtopics:', error)
    } finally {
      setLoading(false)
    }
  }

  const filterSubtopics = () => {
    let filtered = subtopics

    // Filter by selected topic
    if (selectedTopicId) {
      filtered = filtered.filter(subtopic => subtopic.topic_id === selectedTopicId)
    }

    // Filter by search term
    if (searchTerm) {
      filtered = filtered.filter(subtopic => 
        subtopic.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        subtopic.content?.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    // Filter by active status
    if (activeTab === 'active') {
      filtered = filtered.filter(subtopic => subtopic.is_active)
    } else if (activeTab === 'inactive') {
      filtered = filtered.filter(subtopic => !subtopic.is_active)
    }

    setFilteredSubtopics(filtered)
  }

  const handleDeleteSubtopic = async (id: number) => {
    if (confirm('Are you sure you want to delete this subtopic?')) {
      try {
        await subtopicApi.delete(id)
        fetchSubtopics()
      } catch (error) {
        console.error('Error deleting subtopic:', error)
      }
    }
  }

  const getSelectedTopic = () => {
    return topics.find(topic => topic.id === selectedTopicId)
  }

  const SubtopicCard = ({ subtopic }: { subtopic: Subtopic }) => (
    <Card className="group hover:shadow-lg transition-all duration-300 border-l-4" 
          style={{ borderLeftColor: subtopic.topic?.subject?.color || '#3B82F6' }}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 rounded-lg flex items-center justify-center text-white text-sm font-bold"
                 style={{ backgroundColor: subtopic.topic?.subject?.color || '#3B82F6' }}>
              <List className="w-6 h-6" />
            </div>
            <div>
              <CardTitle className="text-lg">{subtopic.title}</CardTitle>
              <CardDescription className="text-sm">
                Topic: {subtopic.topic?.title}
              </CardDescription>
            </div>
          </div>
          <Badge variant={subtopic.is_active ? "default" : "secondary"}>
            {subtopic.is_active ? 'Active' : 'Inactive'}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <p className="text-sm text-gray-600 line-clamp-2">
            {subtopic.content || 'No content available'}
          </p>
          
          <div className="grid grid-cols-2 gap-3 text-sm text-gray-500">
            <div className="flex items-center space-x-1">
              <Clock className="w-4 h-4" />
              <span>{subtopic.duration_lessons} lessons</span>
            </div>
            <div className="flex items-center space-x-1">
              <PlayCircle className="w-4 h-4" />
              <span>{subtopic.activities?.length || 0} activities</span>
            </div>
            <div className="flex items-center space-x-1">
              <CheckSquare className="w-4 h-4" />
              <span>{subtopic.assessment_criteria?.length || 0} assessments</span>
            </div>
            <div className="flex items-center space-x-1">
              <BookMarked className="w-4 h-4" />
              <span>{subtopic.resources?.length || 0} resources</span>
            </div>
          </div>

          <div className="flex items-center justify-between pt-3 border-t">
            <div className="flex space-x-2">
              <Link href={`/admin/subtopics/${subtopic.id}`}>
                <Button variant="outline" size="sm">
                  <Eye className="w-4 h-4 mr-1" />
                  View
                </Button>
              </Link>
              <Link href={`/admin/subtopics/${subtopic.id}/edit`}>
                <Button variant="outline" size="sm">
                  <Edit className="w-4 h-4 mr-1" />
                  Edit
                </Button>
              </Link>
            </div>
            <Button 
              variant="destructive" 
              size="sm"
              onClick={() => handleDeleteSubtopic(subtopic.id)}
            >
              <Trash2 className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  )

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    )
  }

  const selectedTopic = getSelectedTopic()

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Link href="/admin/topics">
            <Button variant="outline" size="sm">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Topics
            </Button>
          </Link>
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Subtopics</h1>
            <p className="text-gray-600">Manage detailed lesson content and activities</p>
          </div>
        </div>
        <Link href="/admin/subtopics/new">
          <Button className="bg-blue-600 hover:bg-blue-700">
            <Plus className="w-4 h-4 mr-2" />
            Add Subtopic
          </Button>
        </Link>
      </div>

      {/* Topic Selection */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <FileText className="w-5 h-5" />
            <span>Select Topic</span>
          </CardTitle>
          <CardDescription>
            Choose a topic to view and manage its subtopics
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Select value={selectedTopicId?.toString() || ''} onValueChange={(value) => setSelectedTopicId(value ? parseInt(value) : null)}>
              <SelectTrigger>
                <SelectValue placeholder="Select a topic..." />
              </SelectTrigger>
              <SelectContent>
                {topics.map((topic) => (
                  <SelectItem key={topic.id} value={topic.id.toString()}>
                    <div className="flex items-center space-x-2">
                      <div 
                        className="w-4 h-4 rounded"
                        style={{ backgroundColor: topic.subject?.color || '#3B82F6' }}
                      />
                      <div className="flex flex-col">
                        <span className="font-medium">{topic.title}</span>
                        <span className="text-sm text-gray-500">
                          {topic.subject?.name} - {topic.subject?.term?.name}
                        </span>
                      </div>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            {selectedTopic && (
              <div className="p-4 rounded-lg border-2" 
                   style={{ 
                     borderColor: selectedTopic.subject?.color || '#3B82F6', 
                     backgroundColor: `${selectedTopic.subject?.color || '#3B82F6'}10` 
                   }}>
                <h3 className="font-semibold" style={{ color: selectedTopic.subject?.color || '#3B82F6' }}>
                  {selectedTopic.title}
                </h3>
                <p className="text-sm text-gray-700">
                  {selectedTopic.subject?.name} - {selectedTopic.subject?.term?.name}
                </p>
                <p className="text-xs text-gray-600 mt-1">
                  {filteredSubtopics.length} subtopics • {selectedTopic.duration_weeks} weeks
                </p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Search and Filters */}
      {selectedTopicId && (
        <Card>
          <CardContent className="pt-6">
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Search subtopics in this topic..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <Link href={`/admin/subtopics/new?topic_id=${selectedTopicId}`}>
                <Button>
                  <Plus className="w-4 h-4 mr-2" />
                  Add Subtopic to {selectedTopic?.title}
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Content */}
      {!selectedTopicId ? (
        <Card>
          <CardContent className="pt-6">
            <div className="text-center py-12">
              <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Select a Topic First</h3>
              <p className="text-gray-600 mb-4">
                Choose a topic from the dropdown above to view and manage its subtopics
              </p>
            </div>
          </CardContent>
        </Card>
      ) : filteredSubtopics.length === 0 ? (
        <Card>
          <CardContent className="pt-6">
            <div className="text-center py-12">
              <List className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No Subtopics Found</h3>
              <p className="text-gray-600 mb-4">
                {searchTerm 
                  ? `No subtopics match "${searchTerm}" in ${selectedTopic?.title}`
                  : `${selectedTopic?.title} doesn't have any subtopics yet`
                }
              </p>
              <Link href={`/admin/subtopics/new?topic_id=${selectedTopicId}`}>
                <Button>
                  <Plus className="w-4 h-4 mr-2" />
                  Add First Subtopic
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-4">
          {/* Topic Context Header */}
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              Showing {filteredSubtopics.length} subtopics for <strong>{selectedTopic?.title}</strong> 
              ({selectedTopic?.subject?.name} - {selectedTopic?.subject?.term?.name})
            </AlertDescription>
          </Alert>

          {/* Tabs */}
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="all">All Subtopics ({filteredSubtopics.length})</TabsTrigger>
              <TabsTrigger value="active">Active ({filteredSubtopics.filter(s => s.is_active).length})</TabsTrigger>
              <TabsTrigger value="inactive">Inactive ({filteredSubtopics.filter(s => !s.is_active).length})</TabsTrigger>
            </TabsList>

            <TabsContent value={activeTab} className="space-y-4">
              {/* Subtopics Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredSubtopics.map((subtopic) => (
                  <SubtopicCard key={subtopic.id} subtopic={subtopic} />
                ))}
              </div>
            </TabsContent>
          </Tabs>

          {/* Topic Summary */}
          <Card>
            <CardContent className="pt-6">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">{filteredSubtopics.length}</div>
                  <div className="text-sm text-gray-600">Total Subtopics</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">
                    {filteredSubtopics.filter(s => s.is_active).length}
                  </div>
                  <div className="text-sm text-gray-600">Active</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">
                    {filteredSubtopics.reduce((sum, s) => sum + s.duration_lessons, 0)}
                  </div>
                  <div className="text-sm text-gray-600">Total Lessons</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-600">
                    {filteredSubtopics.reduce((sum, s) => sum + (s.activities?.length || 0), 0)}
                  </div>
                  <div className="text-sm text-gray-600">Total Activities</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}

export default SubtopicsPage===== frontend/src/app/admin/subtopics/new/page.tsx =====
'use client'

import { useState, useEffect } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  ArrowLeft, 
  Save, 
  FileText,
  Plus,
  Trash2,
  AlertCircle,
  CheckCircle2,
  PlayCircle,
  CheckSquare,
  BookMarked,
  Clock,
  Target
} from 'lucide-react'
import Link from 'next/link'
import { subtopicApi, topicApi } from '@/lib/api'

interface Topic {
  id: number
  title: string
  description: string
  duration_weeks: number
  subject: {
    id: number
    name: string
    code: string
    color: string
    term: {
      id: number
      name: string
      form_grade: {
        id: number
        name: string
        school_level: {
          id: number
          name: string
        }
      }
    }
  }
  is_active: boolean
}

interface Activity {
  title: string
  description: string
  type: string
  duration_minutes: number
}

interface Assessment {
  title: string
  description: string
  type: string
  points: number
}

interface Resource {
  title: string
  description: string
  type: string
  url: string
}

const CreateSubtopicPage = () => {
  const router = useRouter()
  const searchParams = useSearchParams()
  const preselectedTopicId = searchParams.get('topic_id')

  const [topics, setTopics] = useState<Topic[]>([])
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [errors, setErrors] = useState<Record<string, string>>({})

  const [formData, setFormData] = useState({
    title: '',
    content: '',
    activities: [{ title: '', description: '', type: 'individual', duration_minutes: 30 }] as Activity[],
    assessment_criteria: [{ title: '', description: '', type: 'formative', points: 10 }] as Assessment[],
    resources: [{ title: '', description: '', type: 'document', url: '' }] as Resource[],
    duration_lessons: 1,
    display_order: 0,
    topic_id: preselectedTopicId ? parseInt(preselectedTopicId) : null as number | null,
    is_active: true
  })

  useEffect(() => {
    fetchTopics()
  }, [])

  const fetchTopics = async () => {
    try {
      const response = await topicApi.getAll()
      setTopics(response.data || [])
    } catch (error) {
      console.error('Error fetching topics:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }))
    }
  }

  // Activities Management
  const handleActivityChange = (index: number, field: string, value: any) => {
    const newActivities = [...formData.activities]
    newActivities[index] = { ...newActivities[index], [field]: value }
    setFormData(prev => ({ ...prev, activities: newActivities }))
  }

  const addActivity = () => {
    setFormData(prev => ({
      ...prev,
      activities: [...prev.activities, { title: '', description: '', type: 'individual', duration_minutes: 30 }]
    }))
  }

  const removeActivity = (index: number) => {
    if (formData.activities.length > 1) {
      const newActivities = formData.activities.filter((_, i) => i !== index)
      setFormData(prev => ({ ...prev, activities: newActivities }))
    }
  }

  // Assessment Management
  const handleAssessmentChange = (index: number, field: string, value: any) => {
    const newAssessments = [...formData.assessment_criteria]
    newAssessments[index] = { ...newAssessments[index], [field]: value }
    setFormData(prev => ({ ...prev, assessment_criteria: newAssessments }))
  }

  const addAssessment = () => {
    setFormData(prev => ({
      ...prev,
      assessment_criteria: [...prev.assessment_criteria, { title: '', description: '', type: 'formative', points: 10 }]
    }))
  }

  const removeAssessment = (index: number) => {
    if (formData.assessment_criteria.length > 1) {
      const newAssessments = formData.assessment_criteria.filter((_, i) => i !== index)
      setFormData(prev => ({ ...prev, assessment_criteria: newAssessments }))
    }
  }

  // Resources Management
  const handleResourceChange = (index: number, field: string, value: any) => {
    const newResources = [...formData.resources]
    newResources[index] = { ...newResources[index], [field]: value }
    setFormData(prev => ({ ...prev, resources: newResources }))
  }

  const addResource = () => {
    setFormData(prev => ({
      ...prev,
      resources: [...prev.resources, { title: '', description: '', type: 'document', url: '' }]
    }))
  }

  const removeResource = (index: number) => {
    if (formData.resources.length > 1) {
      const newResources = formData.resources.filter((_, i) => i !== index)
      setFormData(prev => ({ ...prev, resources: newResources }))
    }
  }

  const validateForm = () => {
    const newErrors: Record<string, string> = {}

    if (!formData.title.trim()) newErrors.title = 'Subtopic title is required'
    if (!formData.topic_id) newErrors.topic_id = 'Please select a topic'
    if (formData.duration_lessons < 1) newErrors.duration_lessons = 'Duration must be at least 1 lesson'

    // Check if at least one activity has content
    const hasValidActivity = formData.activities.some(act => act.title.trim().length > 0)
    if (!hasValidActivity) {
      newErrors.activities = 'At least one activity is required'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) return

    setSaving(true)
    try {
      // Clean up data - remove empty items
      const cleanedData = {
        ...formData,
        activities: formData.activities.filter(act => act.title.trim().length > 0),
        assessment_criteria: formData.assessment_criteria.filter(ass => ass.title.trim().length > 0),
        resources: formData.resources.filter(res => res.title.trim().length > 0)
      }

      const response = await subtopicApi.create(cleanedData)
      if (response.success) {
        router.push('/admin/subtopics')
      } else {
        setErrors({ submit: response.message || 'Failed to create subtopic' })
      }
    } catch (error: any) {
      setErrors({ submit: error.message || 'Network error. Please try again.' })
    } finally {
      setSaving(false)
    }
  }

  const getSelectedTopic = () => {
    return topics.find(topic => topic.id === formData.topic_id)
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    )
  }

  const selectedTopic = getSelectedTopic()

  return (
    <div className="max-w-6xl mx-auto space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center space-x-4">
        <Link href="/admin/subtopics">
          <Button variant="outline" size="sm">
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Subtopics
          </Button>
        </Link>
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Create New Subtopic</h1>
          <p className="text-gray-600">Add detailed lesson content with activities and assessments</p>
        </div>
      </div>

      {/* Pre-selected Topic Alert */}
      {preselectedTopicId && selectedTopic && (
        <Alert className="border-green-200 bg-green-50">
          <CheckCircle2 className="h-4 w-4 text-green-600" />
          <AlertDescription className="text-green-800">
            Creating subtopic for <strong>{selectedTopic.title}</strong> 
            ({selectedTopic.subject?.name} - {selectedTopic.subject?.term?.name})
          </AlertDescription>
        </Alert>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Basic Information */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <FileText className="w-5 h-5" />
              <span>Basic Information</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              {/* Topic Selection */}
              <div className="space-y-2">
                <Label htmlFor="topic_id">Topic *</Label>
                <Select 
                  value={formData.topic_id?.toString() || ''} 
                  onValueChange={(value) => handleInputChange('topic_id', parseInt(value))}
                  disabled={!!preselectedTopicId}
                >
                  <SelectTrigger className={errors.topic_id ? 'border-red-500' : ''}>
                    <SelectValue placeholder="Select a topic..." />
                  </SelectTrigger>
                  <SelectContent>
                    {topics.map((topic) => (
                      <SelectItem key={topic.id} value={topic.id.toString()}>
                        <div className="flex items-center space-x-2">
                          <div 
                            className="w-4 h-4 rounded"
                            style={{ backgroundColor: topic.subject?.color || '#3B82F6' }}
                          />
                          <div className="flex flex-col">
                            <span className="font-medium">{topic.title}</span>
                            <span className="text-sm text-gray-500">
                              {topic.subject?.name} - {topic.subject?.term?.name}
                            </span>
                          </div>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.topic_id && <p className="text-sm text-red-500">{errors.topic_id}</p>}
              </div>

              {/* Subtopic Title */}
              <div className="space-y-2">
                <Label htmlFor="title">Subtopic Title *</Label>
                <Input
                  id="title"
                  value={formData.title}
                  onChange={(e) => handleInputChange('title', e.target.value)}
                  placeholder="e.g., Adding Simple Fractions, Plant Cell Structure"
                  className={errors.title ? 'border-red-500' : ''}
                />
                {errors.title && <p className="text-sm text-red-500">{errors.title}</p>}
              </div>
            </div>

            {/* Content */}
            <div className="space-y-2">
              <Label htmlFor="content">Content Description</Label>
              <Textarea
                id="content"
                value={formData.content}
                onChange={(e) => handleInputChange('content', e.target.value)}
                placeholder="Detailed explanation of what this lesson covers..."
                rows={4}
              />
            </div>

            {/* Duration and Order */}
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="duration_lessons">Duration (lessons) *</Label>
                <Input
                  id="duration_lessons"
                  type="number"
                  value={formData.duration_lessons}
                  onChange={(e) => handleInputChange('duration_lessons', parseInt(e.target.value) || 1)}
                  min="1"
                  max="20"
                  className={errors.duration_lessons ? 'border-red-500' : ''}
                />
                {errors.duration_lessons && <p className="text-sm text-red-500">{errors.duration_lessons}</p>}
              </div>

              <div className="space-y-2">
                <Label htmlFor="display_order">Display Order</Label>
                <Input
                  id="display_order"
                  type="number"
                  value={formData.display_order}
                  onChange={(e) => handleInputChange('display_order', parseInt(e.target.value) || 0)}
                  min="0"
                  placeholder="0"
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Tabbed Content */}
        <Tabs defaultValue="activities" className="space-y-4">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="activities">Activities ({formData.activities.length})</TabsTrigger>
            <TabsTrigger value="assessments">Assessments ({formData.assessment_criteria.length})</TabsTrigger>
            <TabsTrigger value="resources">Resources ({formData.resources.length})</TabsTrigger>
          </TabsList>

          {/* Activities Tab */}
          <TabsContent value="activities">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <PlayCircle className="w-5 h-5" />
                  <span>Learning Activities</span>
                </CardTitle>
                <CardDescription>
                  Define activities students will do in this lesson
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {formData.activities.map((activity, index) => (
                  <div key={index} className="p-4 border rounded-lg space-y-3">
                    <div className="flex items-center justify-between">
                      <Label className="text-base font-medium">Activity {index + 1}</Label>
                      {formData.activities.length > 1 && (
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => removeActivity(index)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      )}
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      <div className="space-y-2">
                        <Label>Activity Title</Label>
                        <Input
                          value={activity.title}
                          onChange={(e) => handleActivityChange(index, 'title', e.target.value)}
                          placeholder="e.g., Group Discussion, Practice Problems"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Type</Label>
                        <Select value={activity.type} onValueChange={(value) => handleActivityChange(index, 'type', value)}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="individual">Individual Work</SelectItem>
                            <SelectItem value="group">Group Work</SelectItem>
                            <SelectItem value="discussion">Class Discussion</SelectItem>
                            <SelectItem value="presentation">Presentation</SelectItem>
                            <SelectItem value="practice">Practice Exercise</SelectItem>
                            <SelectItem value="experiment">Experiment/Lab</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <Label>Description</Label>
                      <Textarea
                        value={activity.description}
                        onChange={(e) => handleActivityChange(index, 'description', e.target.value)}
                        placeholder="Describe what students will do..."
                        rows={2}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label>Duration (minutes)</Label>
                      <Input
                        type="number"
                        value={activity.duration_minutes}
                        onChange={(e) => handleActivityChange(index, 'duration_minutes', parseInt(e.target.value) || 30)}
                        min="5"
                        max="180"
                        className="w-32"
                      />
                    </div>
                  </div>
                ))}

                {errors.activities && <p className="text-sm text-red-500">{errors.activities}</p>}

                <Button type="button" variant="outline" onClick={addActivity} className="w-full">
                  <Plus className="w-4 h-4 mr-2" />
                  Add Another Activity
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Assessments Tab */}
          <TabsContent value="assessments">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <CheckSquare className="w-5 h-5" />
                  <span>Assessment Criteria</span>
                </CardTitle>
                <CardDescription>
                  Define how student learning will be assessed
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {formData.assessment_criteria.map((assessment, index) => (
                  <div key={index} className="p-4 border rounded-lg space-y-3">
                    <div className="flex items-center justify-between">
                      <Label className="text-base font-medium">Assessment {index + 1}</Label>
                      {formData.assessment_criteria.length > 1 && (
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => removeAssessment(index)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      )}
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      <div className="space-y-2">
                        <Label>Assessment Title</Label>
                        <Input
                          value={assessment.title}
                          onChange={(e) => handleAssessmentChange(index, 'title', e.target.value)}
                          placeholder="e.g., Quiz, Exit Ticket, Presentation"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Type</Label>
                        <Select value={assessment.type} onValueChange={(value) => handleAssessmentChange(index, 'type', value)}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="formative">Formative</SelectItem>
                            <SelectItem value="summative">Summative</SelectItem>
                            <SelectItem value="peer">Peer Assessment</SelectItem>
                            <SelectItem value="self">Self Assessment</SelectItem>
                            <SelectItem value="project">Project</SelectItem>
                            <SelectItem value="test">Test/Quiz</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <Label>Description</Label>
                      <Textarea
                        value={assessment.description}
                        onChange={(e) => handleAssessmentChange(index, 'description', e.target.value)}
                        placeholder="Describe what will be assessed and how..."
                        rows={2}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label>Points/Weight</Label>
                      <Input
                        type="number"
                        value={assessment.points}
                        onChange={(e) => handleAssessmentChange(index, 'points', parseInt(e.target.value) || 10)}
                        min="1"
                        max="100"
                        className="w-32"
                      />
                    </div>
                  </div>
                ))}

                <Button type="button" variant="outline" onClick={addAssessment} className="w-full">
                  <Plus className="w-4 h-4 mr-2" />
                  Add Another Assessment
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Resources Tab */}
          <TabsContent value="resources">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <BookMarked className="w-5 h-5" />
                  <span>Learning Resources</span>
                </CardTitle>
                <CardDescription>
                  Add materials and resources for this lesson
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {formData.resources.map((resource, index) => (
                  <div key={index} className="p-4 border rounded-lg space-y-3">
                    <div className="flex items-center justify-between">
                      <Label className="text-base font-medium">Resource {index + 1}</Label>
                      {formData.resources.length > 1 && (
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => removeResource(index)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      )}
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      <div className="space-y-2">
                        <Label>Resource Title</Label>
                        <Input
                          value={resource.title}
                          onChange={(e) => handleResourceChange(index, 'title', e.target.value)}
                          placeholder="e.g., Textbook Chapter 5, Khan Academy Video"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Type</Label>
                        <Select value={resource.type} onValueChange={(value) => handleResourceChange(index, 'type', value)}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="document">Document/PDF</SelectItem>
                            <SelectItem value="video">Video</SelectItem>
                            <SelectItem value="website">Website</SelectItem>
                            <SelectItem value="book">Book/Textbook</SelectItem>
                            <SelectItem value="worksheet">Worksheet</SelectItem>
                            <SelectItem value="software">Software/Tool</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <Label>Description</Label>
                      <Textarea
                        value={resource.description}
                        onChange={(e) => handleResourceChange(index, 'description', e.target.value)}
                        placeholder="Brief description of the resource..."
                        rows={2}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label>URL/Location</Label>
                      <Input
                        value={resource.url}
                        onChange={(e) => handleResourceChange(index, 'url', e.target.value)}
                        placeholder="https://... or physical location"
                      />
                    </div>
                  </div>
                ))}

                <Button type="button" variant="outline" onClick={addResource} className="w-full">
                  <Plus className="w-4 h-4 mr-2" />
                  Add Another Resource
                </Button>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Preview */}
        {selectedTopic && (
          <Card>
            <CardHeader>
              <CardTitle>Preview</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="p-4 border rounded-lg bg-gray-50">
                <div className="flex items-center space-x-3 mb-3">
                  <div 
                    className="w-10 h-10 rounded flex items-center justify-center text-white"
                    style={{ backgroundColor: selectedTopic.subject?.color || '#3B82F6' }}
                  >
                    <FileText className="w-5 h-5" />
                  </div>
                  <div>
                    <div className="font-semibold">{formData.title || 'Subtopic Title'}</div>
                    <div className="text-sm text-gray-500">{selectedTopic.title}</div>
                  </div>
                </div>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600">
                  <span className="flex items-center">
                    <Clock className="w-3 h-3 mr-1" />
                    {formData.duration_lessons} lessons
                  </span>
                  <span className="flex items-center">
                    <PlayCircle className="w-3 h-3 mr-1" />
                    {formData.activities.filter(a => a.title.trim()).length} activities
                  </span>
                  <span className="flex items-center">
                    <CheckSquare className="w-3 h-3 mr-1" />
                    {formData.assessment_criteria.filter(a => a.title.trim()).length} assessments
                  </span>
                  <span className="flex items-center">
                    <BookMarked className="w-3 h-3 mr-1" />
                    {formData.resources.filter(r => r.title.trim()).length} resources
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Submit Errors */}
        {errors.submit && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{errors.submit}</AlertDescription>
          </Alert>
        )}

        {/* Actions */}
        <div className="flex items-center justify-between pt-6 border-t">
          <Link href="/admin/subtopics">
            <Button variant="outline" type="button">
              Cancel
            </Button>
          </Link>
          <Button type="submit" disabled={saving} className="bg-blue-600 hover:bg-blue-700">
            {saving ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Creating...
              </>
            ) : (
              <>
                <Save className="w-4 h-4 mr-2" />
                Create Subtopic
              </>
            )}
          </Button>
        </div>
      </form>
    </div>
  )
}

export default CreateSubtopicPage===== frontend/src/app/admin/subjects/[id]/page.tsx =====
// File: frontend/src/app/admin/subjects/[id]/topics/page.tsx
// Direct subject-specific topics page - no need to select subject again

'use client'

import { useState, useEffect } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  BookOpen, 
  Search, 
  Plus, 
  ArrowLeft,
  Clock,
  Target,
  Eye,
  Edit,
  Trash2,
  FileText,
  Users,
  AlertCircle,
  Loader2,
  RefreshCw
} from 'lucide-react'
import Link from 'next/link'
import { subjectApi, topicApi } from '@/lib/api'
import { toast } from 'sonner'

interface Subject {
  id: number
  name: string
  code: string
  color: string
  description: string
  term: {
    id: number
    name: string
    code: string
    form_grade: {
      id: number
      name: string
      school_level: {
        id: number
        name: string
      }
    }
  }
  is_active: boolean
}

interface Topic {
  id: number
  title: string
  description: string
  duration_weeks: number
  learning_objectives: string[]
  display_order: number
  is_active: boolean
  subtopics_count?: number
  created_at: string
  updated_at: string
}

const SubjectTopicsPage = () => {
  const params = useParams()
  const router = useRouter()
  const subjectId = parseInt(params.id as string)
  
  const [subject, setSubject] = useState<Subject | null>(null)
  const [topics, setTopics] = useState<Topic[]>([])
  const [filteredTopics, setFilteredTopics] = useState<Topic[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState('all')
  const [activeTab, setActiveTab] = useState('active')

  useEffect(() => {
    if (subjectId) {
      fetchSubject()
      fetchTopics()
    }
  }, [subjectId])

  useEffect(() => {
    filterTopics()
  }, [topics, searchTerm, statusFilter, activeTab])

  const fetchSubject = async () => {
    try {
      const response = await subjectApi.getById(subjectId)
      if (response.success && response.data) {
        setSubject(response.data)
      } else {
        throw new Error(response.message || 'Subject not found')
      }
    } catch (error: any) {
      console.error('Error fetching subject:', error)
      toast.error('Failed to load subject details')
    }
  }

  const fetchTopics = async () => {
    try {
      const response = await topicApi.getBySubject(subjectId)
      if (response.success && response.data) {
        setTopics(response.data)
      } else {
        throw new Error(response.message || 'Failed to load topics')
      }
    } catch (error: any) {
      console.error('Error fetching topics:', error)
      toast.error('Failed to load topics')
    } finally {
      setLoading(false)
    }
  }

  const filterTopics = () => {
    let filtered = topics

    // Filter by search term
    if (searchTerm) {
      filtered = filtered.filter(topic => 
        topic.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        topic.description?.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    // Filter by status
    if (activeTab === 'active') {
      filtered = filtered.filter(topic => topic.is_active)
    } else if (activeTab === 'inactive') {
      filtered = filtered.filter(topic => !topic.is_active)
    }

    setFilteredTopics(filtered.sort((a, b) => a.display_order - b.display_order))
  }

  const handleTopicClick = (topicId: number) => {
    router.push(`/admin/topics/${topicId}/subtopics`)
  }

  const handleDeleteTopic = async (topicId: number) => {
    if (confirm('Are you sure you want to delete this topic?')) {
      try {
        const response = await topicApi.delete(topicId)
        if (response.success) {
          toast.success('Topic deleted successfully')
          fetchTopics() // Refresh the list
        } else {
          throw new Error(response.message || 'Failed to delete topic')
        }
      } catch (error: any) {
        console.error('Error deleting topic:', error)
        toast.error('Failed to delete topic')
      }
    }
  }

  if (loading) {
    return (
      <div className="container mx-auto py-6 px-4">
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
            <p className="text-gray-600">Loading topics...</p>
          </div>
        </div>
      </div>
    )
  }

  if (!subject) {
    return (
      <div className="container mx-auto py-6 px-4">
        <div className="text-center py-12">
          <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Subject Not Found</h2>
          <p className="text-gray-600 mb-6">The subject you're looking for doesn't exist or has been deleted.</p>
          <Link href="/admin/subjects">
            <Button>Back to Subjects</Button>
          </Link>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-6 px-4">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Link href={`/admin/subjects?term_id=${subject.term.id}`}>
            <Button variant="ghost" size="icon">
              <ArrowLeft className="h-4 w-4" />
            </Button>
          </Link>
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              Topics for {subject.name}
            </h1>
            <p className="text-gray-600 dark:text-gray-400">
              {subject.term.form_grade.name} • {subject.term.name} • {subject.code}
            </p>
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          <Button variant="outline" size="icon" onClick={() => fetchTopics()}>
            <RefreshCw className="h-4 w-4" />
          </Button>
          <Link href={`/admin/topics/new?subject_id=${subject.id}`}>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Add Topic
            </Button>
          </Link>
        </div>
      </div>

      {/* Subject Info Card */}
      <Card className="mb-6">
        <CardContent className="pt-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div 
                className="p-3 rounded-lg"
                style={{ 
                  backgroundColor: subject.color ? `${subject.color}20` : '#f3f4f6',
                  border: `2px solid ${subject.color || '#e5e7eb'}`
                }}
              >
                <BookOpen 
                  className="h-6 w-6"
                  style={{ color: subject.color || '#6b7280' }}
                />
              </div>
              <div>
                <div className="flex items-center space-x-2 mb-1">
                  <h3 className="font-semibold text-gray-900 dark:text-white">
                    {subject.name}
                  </h3>
                  <Badge variant="secondary" className="text-xs">
                    {subject.code}
                  </Badge>
                  <Badge variant={subject.is_active ? "default" : "secondary"}>
                    {subject.is_active ? 'Active' : 'Inactive'}
                  </Badge>
                </div>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  {subject.description}
                </p>
              </div>
            </div>
            <div className="text-right">
              <div className="text-2xl font-bold text-gray-900 dark:text-white">
                {topics.length}
              </div>
              <div className="text-sm text-gray-600 dark:text-gray-400">
                Total Topics
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Topics List */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span className="flex items-center">
              <FileText className="mr-2 h-5 w-5" />
              Topics
            </span>
            <div className="flex items-center space-x-2">
              <div className="relative">
                <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Search topics..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-8 w-64"
                />
              </div>
            </div>
          </CardTitle>
          <CardDescription>
            Manage topics and learning objectives for {subject.name}
          </CardDescription>
        </CardHeader>

        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-3 mb-6">
              <TabsTrigger value="active">Active ({topics.filter(t => t.is_active).length})</TabsTrigger>
              <TabsTrigger value="inactive">Inactive ({topics.filter(t => !t.is_active).length})</TabsTrigger>
              <TabsTrigger value="all">All ({topics.length})</TabsTrigger>
            </TabsList>

            <TabsContent value={activeTab}>
              {filteredTopics.length === 0 ? (
                <div className="text-center py-8">
                  <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                    {searchTerm ? 'No topics found' : `No ${activeTab === 'all' ? '' : activeTab} topics yet`}
                  </h3>
                  <p className="text-gray-600 dark:text-gray-400 mb-4">
                    {searchTerm 
                      ? 'Try adjusting your search terms'
                      : `Create your first topic for ${subject.name}`
                    }
                  </p>
                  {!searchTerm && (
                    <Link href={`/admin/topics/new?subject_id=${subject.id}`}>
                      <Button>
                        <Plus className="mr-2 h-4 w-4" />
                        Create First Topic
                      </Button>
                    </Link>
                  )}
                </div>
              ) : (
                <div className="space-y-4">
                  {filteredTopics.map((topic) => (
                    <Card key={topic.id} className="border hover:border-blue-200 transition-colors">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-4">
                            <div className="bg-blue-100 p-2 rounded-lg">
                              <Target className="h-5 w-5 text-blue-600" />
                            </div>
                            <div>
                              <div className="flex items-center space-x-2 mb-1">
                                <h3 className="font-semibold text-gray-900 dark:text-white">
                                  {topic.title}
                                </h3>
                                <Badge variant={topic.is_active ? "default" : "secondary"}>
                                  {topic.is_active ? 'Active' : 'Inactive'}
                                </Badge>
                              </div>
                              <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                                {topic.description}
                              </p>
                              <div className="flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400">
                                <span className="flex items-center">
                                  <Clock className="mr-1 h-4 w-4" />
                                  {topic.duration_weeks} week{topic.duration_weeks !== 1 ? 's' : ''}
                                </span>
                                <span className="flex items-center">
                                  <Target className="mr-1 h-4 w-4" />
                                  {topic.learning_objectives?.length || 0} objectives
                                </span>
                                {topic.subtopics_count !== undefined && (
                                  <span className="flex items-center">
                                    <FileText className="mr-1 h-4 w-4" />
                                    {topic.subtopics_count} subtopics
                                  </span>
                                )}
                                <span className="flex items-center">
                                  <Users className="mr-1 h-4 w-4" />
                                  Order: {topic.display_order}
                                </span>
                              </div>
                            </div>
                          </div>

                          <div className="flex items-center space-x-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleTopicClick(topic.id)}
                              className="text-green-600 hover:text-green-700 hover:bg-green-50"
                            >
                              <FileText className="mr-2 h-4 w-4" />
                              Subtopics
                            </Button>
                            
                            <Link href={`/admin/topics/${topic.id}/edit`}>
                              <Button variant="outline" size="sm">
                                <Edit className="h-4 w-4" />
                              </Button>
                            </Link>
                            
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleDeleteTopic(topic.id)}
                              className="text-red-600 hover:text-red-700"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  )
}

export default SubjectTopicsPage===== frontend/src/app/admin/subjects/page.tsx =====
'use client'

import { useState, useEffect } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  Plus, 
  Edit, 
  Trash2, 
  BookOpen,
  ArrowLeft,
  Loader2,
  RefreshCw,
  AlertCircle,
  Calendar,
  GraduationCap,
  Target,
  Palette,
  Eye,
  EyeOff
} from 'lucide-react'
import Link from 'next/link'
import { subjectApi, termApi, type Subject, type Term } from '@/lib/api'
import { toast } from 'sonner'
import { safeRoutes, isValidId, toValidId } from '@/lib/safe-links'
import { EnhancedDeleteDialog } from '@/components/ui/enhanced-delete-dialog'

const SubjectsManagePage = () => {
  const router = useRouter()
  const searchParams = useSearchParams()
  const termIdParam = searchParams.get('term_id')
  
  // Validate term_id parameter
  const termId = toValidId(termIdParam)
  const isValidTermId = isValidId(termId)
  
  const [subjects, setSubjects] = useState<Subject[]>([])
  const [availableTerms, setAvailableTerms] = useState<Term[]>([])
  const [currentTerm, setCurrentTerm] = useState<Term | null>(null)
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState('active')
  const [error, setError] = useState<string | null>(null)
  const [selectedTermId, setSelectedTermId] = useState<number | null>(termId)

  // Enhanced delete dialog state
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)
  const [subjectToDelete, setSubjectToDelete] = useState<Subject | null>(null)
  const [deleteLoading, setDeleteLoading] = useState(false)

  console.log('Subjects page - URL validation:', {
    termIdParam,
    termId,
    isValidTermId,
    selectedTermId
  })

  // Load available terms for dropdown
  const loadAvailableTerms = async () => {
    try {
      const response = await termApi.getAll({ include_inactive: false })
      if (response.success && response.data) {
        setAvailableTerms(response.data)
        console.log('Loaded available terms:', response.data)
      }
    } catch (error: any) {
      console.error('Failed to load terms:', error)
    }
  }

  // Load subjects for selected term
  const loadSubjects = async (termIdToLoad?: number) => {
    const targetTermId = termIdToLoad || selectedTermId
    
    if (!targetTermId || !isValidId(targetTermId)) {
      setSubjects([])
      setCurrentTerm(null)
      setLoading(false)
      return
    }

    try {
      setLoading(true)
      setError(null)
      
      console.log('Loading subjects for term ID:', targetTermId)
      
      // Load term details and subjects in parallel
      const [termResponse, subjectsResponse] = await Promise.all([
        termApi.getById(targetTermId),
        subjectApi.getByTerm(targetTermId, true) // Include inactive subjects
      ])
      
      if (termResponse.success && termResponse.data) {
        setCurrentTerm(termResponse.data)
      }
      
      if (subjectsResponse.success && subjectsResponse.data) {
        setSubjects(subjectsResponse.data)
        console.log('Loaded subjects:', subjectsResponse.data)
      } else {
        throw new Error(subjectsResponse.message || 'Failed to load subjects')
      }
    } catch (error: any) {
      console.error('Error loading subjects:', error)
      setError(error.message || 'Failed to load subjects')
      toast.error('Failed to load subjects')
    } finally {
      setLoading(false)
    }
  }

  // Handle term selection from dropdown
  const handleTermSelect = (termIdString: string) => {
    const newTermId = parseInt(termIdString, 10)
    if (isValidId(newTermId)) {
      setSelectedTermId(newTermId)
      // Update URL to reflect selected term
      const newUrl = safeRoutes.subjectsForTerm(newTermId)
      router.push(newUrl)
    }
  }

  // Load data on component mount and when term changes
  useEffect(() => {
    loadAvailableTerms()
  }, [])

  useEffect(() => {
    if (selectedTermId) {
      loadSubjects(selectedTermId)
    } else {
      setLoading(false)
    }
  }, [selectedTermId])

  // Handle delete subject
  const handleDeleteSubject = async (permanent: boolean = false) => {
    if (!subjectToDelete) return

    try {
      setDeleteLoading(true)
      
      console.log(`${permanent ? 'Hard' : 'Soft'} deleting subject:`, subjectToDelete.id)
      
      const response = await subjectApi.delete(subjectToDelete.id, !permanent)
      
      if (response.success) {
        const deleteType = permanent ? 'permanently deleted' : 'deactivated'
        toast.success(`Subject "${subjectToDelete.name}" ${deleteType} successfully`)
        
        setDeleteDialogOpen(false)
        setSubjectToDelete(null)
        
        // Refresh the list
        loadSubjects()
      } else {
        throw new Error(response.message || `Failed to ${permanent ? 'delete' : 'deactivate'} subject`)
      }
    } catch (error: any) {
      console.error('Error deleting subject:', error)
      const action = permanent ? 'delete' : 'deactivate'
      toast.error(error.message || `Failed to ${action} subject`)
    } finally {
      setDeleteLoading(false)
    }
  }

  const openDeleteDialog = (subject: Subject) => {
    setSubjectToDelete(subject)
    setDeleteDialogOpen(true)
  }

  const closeDeleteDialog = () => {
    if (!deleteLoading) {
      setDeleteDialogOpen(false)
      setSubjectToDelete(null)
    }
  }

  // Handle subject status toggle
  const handleToggleSubjectStatus = async (id: number, currentStatus: boolean) => {
    if (!isValidId(id)) {
      toast.error('Invalid subject ID')
      return
    }
    
    try {
      const newStatus = !currentStatus
      const action = newStatus ? 'activate' : 'deactivate'
      
      const response = await subjectApi.update(id, { is_active: newStatus })
      
      if (response.success) {
        toast.success(`Subject ${action}d successfully`)
        loadSubjects()
      } else {
        throw new Error(response.message || `Failed to ${action} subject`)
      }
    } catch (error: any) {
      console.error('Error updating subject status:', error)
      const action = !currentStatus ? 'activate' : 'deactivate'
      toast.error(error.message || `Failed to ${action} subject`)
    }
  }

  // 🎯 Navigate to Topics - Fixed this function
  const handleTopicsNavigation = (subjectId: number) => {
    if (!isValidId(subjectId)) {
      toast.error('Invalid subject ID')
      return
    }
    router.push(`/admin/topics?subject_id=${subjectId}`)
  }

  // 🎯 Navigate to Edit - Fixed this function
  const handleEditNavigation = (subjectId: number) => {
    if (!isValidId(subjectId)) {
      toast.error('Invalid subject ID')
      return
    }
    router.push(`/admin/subjects/${subjectId}/edit`)
  }

  // Filter subjects based on active tab
  const filteredSubjects = subjects.filter(subject => {
    if (activeTab === 'active') return subject.is_active
    if (activeTab === 'inactive') return !subject.is_active
    return true // 'all' tab
  })

  // Term selection UI
  const TermSelector = () => (
    <Card className="mb-6">
      <CardHeader>
        <CardTitle className="flex items-center">
          <Calendar className="mr-2 h-5 w-5" />
          Select Term
        </CardTitle>
        <CardDescription>
          Choose a term to view and manage its subjects
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Select 
          value={selectedTermId?.toString() || ""} 
          onValueChange={handleTermSelect}
        >
          <SelectTrigger className="w-full">
            <SelectValue placeholder="Select a term..." />
          </SelectTrigger>
          <SelectContent>
            {availableTerms.map((term) => (
              <SelectItem key={term.id} value={term.id.toString()}>
                <div className="flex items-center space-x-2">
                  <Badge variant="secondary" className="text-xs">
                    {term.code}
                  </Badge>
                  <span>{term.name}</span>
                  <span className="text-gray-500">
                    • {term.form_grade?.name}
                  </span>
                </div>
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </CardContent>
    </Card>
  )

  // Show term selector if no term selected
  if (!selectedTermId || !isValidTermId) {
    return (
      <div className="container mx-auto py-6 px-4">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-4">
            <Link href="/admin/terms">
              <Button variant="ghost" size="icon">
                <ArrowLeft className="h-4 w-4" />
              </Button>
            </Link>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                Subjects
              </h1>
              <p className="text-gray-600 dark:text-gray-400">
                Create and manage subjects for specific terms
              </p>
            </div>
          </div>
          <Button disabled>
            <Plus className="mr-2 h-4 w-4" />
            Add Subject
          </Button>
        </div>

        <TermSelector />

        {/* Empty state */}
        <Card>
          <CardContent className="py-12">
            <div className="text-center">
              <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                Select a Term First
              </h3>
              <p className="text-gray-600 dark:text-gray-400">
                Choose a term from the dropdown above to view and manage its subjects
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (loading) {
    return (
      <div className="container mx-auto py-6 px-4">
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
            <p className="text-gray-600">Loading subjects...</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-6 px-4">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Link href="/admin/terms">
            <Button variant="ghost" size="icon">
              <ArrowLeft className="h-4 w-4" />
            </Button>
          </Link>
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              Subjects for {currentTerm?.name || `Term ${selectedTermId}`}
            </h1>
            <p className="text-gray-600 dark:text-gray-400">
              Manage subjects and their content
              {currentTerm?.form_grade && ` • ${currentTerm.form_grade.name}`}
            </p>
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          <Button variant="outline" size="icon" onClick={() => loadSubjects()}>
            <RefreshCw className="h-4 w-4" />
          </Button>
          <Link href={safeRoutes.newSubjectForTerm(selectedTermId)}>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Add Subject
            </Button>
          </Link>
        </div>
      </div>

      {/* Term Selector (when term is selected) */}
      <TermSelector />

      {/* Current Term Info */}
      {currentTerm && (
        <Card className="mb-6">
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="bg-blue-100 dark:bg-blue-900 p-2 rounded">
                  <span className="text-blue-600 dark:text-blue-400 font-semibold">
                    {currentTerm.code}
                  </span>
                </div>
                <div>
                  <h3 className="font-semibold">{currentTerm.name}</h3>
                  {currentTerm.form_grade && (
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      {currentTerm.form_grade.name} • Order: {currentTerm.display_order}
                    </p>
                  )}
                </div>
              </div>
              <Badge variant={currentTerm.is_active ? "default" : "secondary"}>
                {currentTerm.is_active ? 'Active' : 'Inactive'}
              </Badge>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Error Alert */}
      {error && (
        <Alert className="mb-6 border-red-200 bg-red-50">
          <AlertCircle className="h-4 w-4 text-red-600" />
          <AlertDescription className="text-red-800">
            {error}
          </AlertDescription>
        </Alert>
      )}

      {/* Subjects List */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span className="flex items-center">
              <BookOpen className="mr-2 h-5 w-5" />
              Subjects
            </span>
            <Badge variant="outline">
              {subjects.length} total
            </Badge>
          </CardTitle>
          <CardDescription>
            Manage subjects for this term
          </CardDescription>
        </CardHeader>

        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-3 mb-6">
              <TabsTrigger value="active">Active ({subjects.filter(s => s.is_active).length})</TabsTrigger>
              <TabsTrigger value="inactive">Inactive ({subjects.filter(s => !s.is_active).length})</TabsTrigger>
              <TabsTrigger value="all">All ({subjects.length})</TabsTrigger>
            </TabsList>

            <TabsContent value={activeTab}>
              {filteredSubjects.length === 0 ? (
                <div className="text-center py-8">
                  <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                    No {activeTab === 'all' ? '' : activeTab} subjects found
                  </h3>
                  <p className="text-gray-600 dark:text-gray-400 mb-4">
                    {activeTab === 'active' 
                      ? 'There are no active subjects for this term yet.'
                      : activeTab === 'inactive'
                      ? 'There are no inactive subjects for this term.'
                      : 'This term has no subjects yet.'}
                  </p>
                  <Link href={safeRoutes.newSubjectForTerm(selectedTermId)}>
                    <Button>
                      <Plus className="mr-2 h-4 w-4" />
                      Create First Subject
                    </Button>
                  </Link>
                </div>
              ) : (
                <div className="space-y-4">
                  {filteredSubjects
                    .sort((a, b) => a.display_order - b.display_order)
                    .map((subject) => (
                    <Card key={subject.id} className="border hover:border-blue-200 transition-colors">
                      <CardContent className="p-6">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-4">
                            <div 
                              className="p-3 rounded-lg"
                              style={{ 
                                backgroundColor: subject.color ? `${subject.color}20` : '#f3f4f6',
                                border: `2px solid ${subject.color || '#e5e7eb'}`
                              }}
                            >
                              <BookOpen 
                                className="h-6 w-6"
                                style={{ color: subject.color || '#6b7280' }}
                              />
                            </div>
                            
                            <div>
                              <div className="flex items-center space-x-2 mb-1">
                                <h3 className="font-semibold text-gray-900 dark:text-white">
                                  {subject.name}
                                </h3>
                                <Badge variant="secondary" className="text-xs">
                                  {subject.code}
                                </Badge>
                                <Badge 
                                  variant={subject.is_active ? "default" : "secondary"}
                                  className={subject.is_active ? "bg-green-100 text-green-800" : ""}
                                >
                                  {subject.is_active ? 'Active' : 'Inactive'}
                                </Badge>
                              </div>
                              
                              <div className="flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400">
                                <span className="flex items-center">
                                  <Target className="mr-1 h-4 w-4" />
                                  Order: {subject.display_order}
                                </span>
                                {subject.color && (
                                  <span className="flex items-center">
                                    <Palette className="mr-1 h-4 w-4" />
                                    Color: {subject.color}
                                  </span>
                                )}
                                {subject.topics_count !== undefined && (
                                  <span className="flex items-center">
                                    <BookOpen className="mr-1 h-4 w-4" />
                                    {subject.topics_count} topics
                                  </span>
                                )}
                              </div>
                              
                              {subject.description && (
                                <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                                  {subject.description}
                                </p>
                              )}
                            </div>
                          </div>

                          <div className="flex items-center space-x-2">
                            {/* 🎯 FIXED: Topics Button - Now works properly */}
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleTopicsNavigation(subject.id)}
                              disabled={!isValidId(subject.id)}
                              className="text-blue-600 hover:text-blue-700 hover:bg-blue-50"
                            >
                              <BookOpen className="mr-2 h-4 w-4" />
                              Topics
                            </Button>
                            
                            {/* 🎯 FIXED: Edit Button - Now works properly */}
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleEditNavigation(subject.id)}
                              disabled={!isValidId(subject.id)}
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            
                            {/* Status Toggle Button */}
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleToggleSubjectStatus(subject.id, subject.is_active)}
                              disabled={!isValidId(subject.id)}
                              className={subject.is_active ? "text-orange-600 hover:text-orange-700" : "text-green-600 hover:text-green-700"}
                            >
                              {subject.is_active ? (
                                <>
                                  <EyeOff className="mr-1 h-4 w-4" />
                                  Deactivate
                                </>
                              ) : (
                                <>
                                  <Eye className="mr-1 h-4 w-4" />
                                  Activate
                                </>
                              )}
                            </Button>
                            
                            {/* Delete Button */}
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => openDeleteDialog(subject)}
                              className="text-red-600 hover:text-red-700"
                              disabled={!isValidId(subject.id)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* Enhanced Delete Dialog */}
      {subjectToDelete && (
        <EnhancedDeleteDialog
          open={deleteDialogOpen}
          onOpenChange={closeDeleteDialog}
          onConfirm={handleDeleteSubject}
          loading={deleteLoading}
          title="Delete Subject"
          itemName={subjectToDelete.name}
          itemType="subject"
          isActive={subjectToDelete.is_active}
          showSoftDeleteOption={true}
          showHardDeleteOption={true}
        >
          <div className="space-y-2">
            <h5 className="font-medium text-gray-900">Subject Details:</h5>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-600">Code:</span>
                <span className="ml-2 font-mono">{subjectToDelete.code}</span>
              </div>
              <div>
                <span className="text-gray-600">Order:</span>
                <span className="ml-2">{subjectToDelete.display_order}</span>
              </div>
              <div>
                <span className="text-gray-600">Status:</span>
                <span className={`ml-2 ${subjectToDelete.is_active ? 'text-green-600' : 'text-gray-500'}`}>
                  {subjectToDelete.is_active ? 'Active' : 'Inactive'}
                </span>
              </div>
              <div>
                <span className="text-gray-600">Topics:</span>
                <span className="ml-2">{subjectToDelete.topics_count || 0}</span>
              </div>
            </div>
            
            {subjectToDelete.topics_count && subjectToDelete.topics_count > 0 && (
              <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg mt-3">
                <div className="flex items-center space-x-2">
                  <AlertCircle className="h-4 w-4 text-yellow-600" />
                  <span className="text-sm font-medium text-yellow-900">Contains Topics</span>
                </div>
                <p className="text-sm text-yellow-700 mt-1">
                  This subject contains {subjectToDelete.topics_count} topic{subjectToDelete.topics_count !== 1 ? 's' : ''}. 
                  Deleting this subject may affect those topics.
                </p>
              </div>
            )}
          </div>
        </EnhancedDeleteDialog>
      )}
    </div>
  )
}

export default SubjectsManagePage===== frontend/src/app/admin/subjects/new/page.tsx =====
'use client'

import { useState, useEffect } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import * as z from 'zod'
import { ArrowLeft, Save, Loader2, AlertCircle, Palette } from 'lucide-react'
import Link from 'next/link'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Checkbox } from '@/components/ui/checkbox'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { toast } from 'sonner'
import { subjectApi, termApi, type SubjectCreate, type Term } from '@/lib/api'
import { isValidId, toValidId, safeRoutes } from '@/lib/safe-links'

// Validation schema
const subjectSchema = z.object({
  name: z.string().min(1, 'Name is required').max(150, 'Name must be less than 150 characters'),
  code: z.string().min(1, 'Code is required').max(20, 'Code must be less than 20 characters'),
  description: z.string().optional(),
  color: z.string().optional(),
  icon: z.string().optional(),
  animation: z.string().optional(),
  display_order: z.number().min(0, 'Display order must be 0 or greater').default(0),
  term_id: z.number().min(1, 'Term ID is required'),
  is_active: z.boolean().default(true),
})

type SubjectFormData = z.infer<typeof subjectSchema>

// Color options for subjects
const colorOptions = [
  { name: 'Blue', value: '#3B82F6' },
  { name: 'Red', value: '#EF4444' },
  { name: 'Green', value: '#10B981' },
  { name: 'Yellow', value: '#F59E0B' },
  { name: 'Purple', value: '#8B5CF6' },
  { name: 'Pink', value: '#EC4899' },
  { name: 'Orange', value: '#F97316' },
  { name: 'Teal', value: '#14B8A6' },
  { name: 'Indigo', value: '#6366F1' },
  { name: 'Gray', value: '#6B7280' },
]

export default function CreateSubjectPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const termIdParam = searchParams.get('term_id')
  
  // Validate term_id parameter
  const termId = toValidId(termIdParam)
  const isValidTermId = isValidId(termId)
  
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [term, setTerm] = useState<Term | null>(null)
  const [loadingTerm, setLoadingTerm] = useState(false)
  const [error, setError] = useState<string | null>(null)

  console.log('New Subject Page - URL validation:', {
    termIdParam,
    termId,
    isValidTermId
  })

  const form = useForm<SubjectFormData>({
    resolver: zodResolver(subjectSchema),
    defaultValues: {
      name: '',
      code: '',
      description: '',
      color: colorOptions[0].value,
      icon: '',
      animation: '',
      display_order: 0,
      term_id: termId || 1,
      is_active: true,
    },
  })

  // Load term information
  useEffect(() => {
    if (isValidTermId && termId) {
      loadTerm()
    } else {
      setError(
        !termIdParam 
          ? 'No term ID provided in URL'
          : `Invalid term ID: "${termIdParam}". Must be a positive integer.`
      )
    }
  }, [termIdParam, isValidTermId, termId])

  const loadTerm = async () => {
    if (!termId) return
    
    try {
      setLoadingTerm(true)
      setError(null)
      
      const response = await termApi.getById(termId)
      
      if (response.success && response.data) {
        setTerm(response.data)
        form.setValue('term_id', termId)
      } else {
        throw new Error(response.message || 'Failed to load term information')
      }
    } catch (error: any) {
      console.error('Failed to load term:', error)
      setError(`Failed to load term information: ${error.message}`)
    } finally {
      setLoadingTerm(false)
    }
  }

  const onSubmit = async (data: SubjectFormData) => {
    if (isSubmitting) return
    
    setIsSubmitting(true)
    
    try {
      console.log('Submitting subject data:', data)

      const subjectData: SubjectCreate = {
        name: data.name.trim(),
        code: data.code.trim().toUpperCase(),
        description: data.description?.trim() || undefined,
        color: data.color || undefined,
        icon: data.icon || undefined,
        animation: data.animation || undefined,
        display_order: data.display_order,
        term_id: data.term_id,
        is_active: data.is_active,
      }

      console.log('Processed data for API:', subjectData)

      const response = await subjectApi.create(subjectData)
      
      console.log('API response:', response)

      if (response.success) {
        toast.success('Subject created successfully')
        
        // Navigate back to subjects list
        const backUrl = safeRoutes.subjectsForTerm(termId)
        router.push(backUrl)
        router.refresh()
      } else {
        throw new Error(response.message || 'Failed to create subject')
      }
    } catch (error: any) {
      console.error('Failed to create subject:', error)
      
      let errorMessage = 'Failed to create subject'
      
      if (error.message?.includes('already exists')) {
        errorMessage = 'A subject with this code already exists in this term'
      } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
        errorMessage = 'Network error. Please check if the backend server is running.'
      } else if (error.message) {
        errorMessage = error.message
      }
      
      toast.error(errorMessage)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleCancel = () => {
    if (termId) {
      const backUrl = safeRoutes.subjectsForTerm(termId)
      router.push(backUrl)
    } else {
      router.push('/admin/subjects')
    }
  }

  // Show error if invalid term_id
  if (error || !isValidTermId) {
    return (
      <div className="container mx-auto py-6 px-4">
        <Alert className="max-w-2xl mx-auto">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            {error || 'Invalid term ID provided in URL.'}
          </AlertDescription>
        </Alert>
        
        <div className="text-center mt-6 space-x-4">
          <Link href="/admin/subjects">
            <Button variant="outline">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Subjects
            </Button>
          </Link>
          <Button variant="outline" onClick={() => window.location.reload()}>
            Reload Page
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-6 px-4">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Button 
            variant="ghost" 
            size="icon" 
            onClick={handleCancel}
          >
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              Create New Subject
            </h1>
            <p className="text-gray-600 dark:text-gray-400">
              {loadingTerm ? (
                'Loading term information...'
              ) : term ? (
                `Add a new subject for ${term.name}`
              ) : (
                `Add a new subject for Term ${termId}`
              )}
            </p>
          </div>
        </div>
      </div>

      {/* Term Info */}
      {term && (
        <Card className="mb-6 max-w-2xl">
          <CardContent className="pt-6">
            <div className="flex items-center space-x-4">
              <div className="bg-blue-100 dark:bg-blue-900 p-2 rounded">
                <span className="text-blue-600 dark:text-blue-400 font-semibold">
                  {term.code}
                </span>
              </div>
              <div>
                <h3 className="font-semibold">{term.name}</h3>
                {term.form_grade && (
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    {term.form_grade.name}
                  </p>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Form Card */}
      <Card className="max-w-2xl">
        <CardHeader>
          <CardTitle>Subject Information</CardTitle>
          <CardDescription>
            Fill in the details for the new subject. The code will be automatically converted to uppercase.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              {/* Name Field */}
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Name *</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., Mathematics, English, Science"
                        {...field}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <FormDescription>
                      The full name of the subject
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Code Field */}
              <FormField
                control={form.control}
                name="code"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Code *</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., MATH, ENG, SCI"
                        {...field}
                        onChange={(e) => field.onChange(e.target.value.toUpperCase())}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <FormDescription>
                      A unique short code for the subject (automatically converted to uppercase)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Description Field */}
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Brief description of the subject (optional)"
                        className="min-h-[80px]"
                        {...field}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <FormDescription>
                      Optional description of what this subject covers
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Color Field */}
              <FormField
                control={form.control}
                name="color"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Color</FormLabel>
                    <FormControl>
                      <div className="space-y-2">
                        <Select value={field.value} onValueChange={field.onChange}>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a color">
                              {field.value && (
                                <div className="flex items-center space-x-2">
                                  <div 
                                    className="w-4 h-4 rounded"
                                    style={{ backgroundColor: field.value }}
                                  />
                                  <span>
                                    {colorOptions.find(c => c.value === field.value)?.name || 'Custom'}
                                  </span>
                                </div>
                              )}
                            </SelectValue>
                          </SelectTrigger>
                          <SelectContent>
                            {colorOptions.map((color) => (
                              <SelectItem key={color.value} value={color.value}>
                                <div className="flex items-center space-x-2">
                                  <div 
                                    className="w-4 h-4 rounded border"
                                    style={{ backgroundColor: color.value }}
                                  />
                                  <span>{color.name}</span>
                                </div>
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </FormControl>
                    <FormDescription>
                      Color theme for this subject in the interface
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Display Order Field */}
              <FormField
                control={form.control}
                name="display_order"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Display Order</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        min="0"
                        placeholder="0"
                        {...field}
                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <FormDescription>
                      Controls the order in which subjects are displayed (0 = first)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Active Status Field */}
              <FormField
                control={form.control}
                name="is_active"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel>
                        Active
                      </FormLabel>
                      <FormDescription>
                        Whether this subject is currently active and available for use
                      </FormDescription>
                    </div>
                  </FormItem>
                )}
              />

              {/* Form Actions */}
              <div className="flex items-center justify-end space-x-4 pt-6">
                <Button
                  type="button"
                  variant="outline"
                  onClick={handleCancel}
                  disabled={isSubmitting}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isSubmitting}
                  className="min-w-[120px]"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Creating...
                    </>
                  ) : (
                    <>
                      <Save className="mr-2 h-4 w-4" />
                      Create Subject
                    </>
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  )
}===== frontend/src/app/admin/forms-grades/[id]/edit/page.tsx =====
"use client"

import { useEffect, useState } from 'react'
import { useRouter, useParams } from 'next/navigation'
import Link from 'next/link'
import { ArrowLeft, Save, Loader2 } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Checkbox } from '@/components/ui/checkbox'
import { toast } from 'sonner'
import { formGradeApi, type FormGrade, type FormGradeUpdate } from '@/lib/api'

export default function EditGradePage() {
  const router = useRouter()
  const params = useParams()
  const id = params?.id ? Number(params.id) : null
  const [grade, setGrade] = useState<FormGrade | null>(null)
  const [formData, setFormData] = useState<FormGradeUpdate>({})
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)

  useEffect(() => {
    const fetchGrade = async () => {
      if (!id) return
      setLoading(true)
      const response = await formGradeApi.getById(id)
      if (response.success && response.data) {
        setGrade(response.data)
        setFormData({
          name: response.data.name,
          code: response.data.code,
          description: response.data.description,
          display_order: response.data.display_order,
          is_active: response.data.is_active,
        })
      } else {
        toast.error(response.message || 'Failed to load grade')
      }
      setLoading(false)
    }
    fetchGrade()
  }, [id])

  const handleInputChange = (field: keyof FormGradeUpdate, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!id) return
    if (!formData.name?.trim()) {
      toast.error('Name is required')
      return
    }
    if (!formData.code?.trim()) {
      toast.error('Code is required')
      return
    }
    try {
      setSaving(true)
      const response = await formGradeApi.update(id, formData)
      if (response.success && response.data) {
        toast.success('Grade updated successfully')
        router.push(`/admin/forms-grades/${id}`)
      } else {
        throw new Error(response.message || 'Failed to update grade')
      }
    } catch (error: any) {
      console.error('Failed to update grade:', error)
      toast.error(error.message || 'Failed to update grade')
    } finally {
      setSaving(false)
    }
  }

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[40vh]">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-white mb-4" />
        <p className="text-lg text-gray-700 dark:text-gray-300">Loading grade...</p>
      </div>
    )
  }

  if (!grade) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[40vh]">
        <p className="text-lg text-red-600 dark:text-red-400 font-semibold">Grade not found.</p>
        <Link href="/admin/forms-grades">
          <Button variant="outline" className="mt-4">Back to Grades</Button>
        </Link>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-8 px-4 max-w-3xl">
      <div className="flex items-center space-x-4 mb-8">
        <Link href={`/admin/forms-grades/${id}`}>
          <Button variant="outline" size="sm">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Grade
          </Button>
        </Link>
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
          Edit {grade.name}
        </h1>
      </div>
      <Card className="w-full shadow-lg border border-gray-200 dark:border-gray-700">
        <CardHeader>
          <CardTitle className="text-xl">Edit Grade</CardTitle>
          <CardDescription className="text-gray-500">Update the details for this grade</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Name */}
            <div className="space-y-2">
              <Label htmlFor="name">Name *</Label>
              <Input
                id="name"
                value={formData.name || ''}
                onChange={(e) => handleInputChange('name', e.target.value)}
                required
              />
            </div>
            {/* Code */}
            <div className="space-y-2">
              <Label htmlFor="code">Code *</Label>
              <Input
                id="code"
                value={formData.code || ''}
                onChange={(e) => handleInputChange('code', e.target.value)}
                required
              />
            </div>
            {/* Description */}
            <div className="space-y-2">
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                value={formData.description || ''}
                onChange={(e) => handleInputChange('description', e.target.value)}
                rows={3}
              />
            </div>
            {/* Display Order */}
            <div className="space-y-2">
              <Label htmlFor="display_order">Display Order</Label>
              <Input
                id="display_order"
                type="number"
                value={formData.display_order ?? 0}
                onChange={(e) => handleInputChange('display_order', parseInt(e.target.value) || 0)}
                min="0"
              />
            </div>
            {/* Active Status */}
            <div className="flex items-center space-x-2">
              <Checkbox
                id="is_active"
                checked={formData.is_active ?? true}
                onCheckedChange={(checked) => handleInputChange('is_active', checked)}
              />
              <Label htmlFor="is_active">Active</Label>
            </div>
            {/* Submit Button */}
            <div className="flex items-center space-x-4 pt-4">
              <Button type="submit" disabled={saving}>
                {saving ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Saving...
                  </>
                ) : (
                  <>
                    <Save className="mr-2 h-4 w-4" />
                    Save Changes
                  </>
                )}
              </Button>
              <Link href={`/admin/forms-grades/${id}`}>
                <Button type="button" variant="outline">
                  Cancel
                </Button>
              </Link>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  )
} ===== frontend/src/app/admin/forms-grades/[id]/page.tsx =====
"use client"

import { useEffect, useState } from 'react'
import { useRouter, useParams } from 'next/navigation'
import Link from 'next/link'
import { ArrowLeft, Edit } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { toast } from 'sonner'
import { formGradeApi, type FormGrade } from '@/lib/api'
import { Checkbox } from '@/components/ui/checkbox'
import { subjectApi } from '@/lib/api'

export default function GradeDetailPage() {
  const router = useRouter()
  const params = useParams()
  const id = params?.id ? Number(params.id) : null
  const [grade, setGrade] = useState<FormGrade | null>(null)
  const [loading, setLoading] = useState(true)
  const [subjects, setSubjects] = useState<any[]>([])
  const [assignedSubjectIds, setAssignedSubjectIds] = useState<number[]>([])
  const [subjectsLoading, setSubjectsLoading] = useState(true)
  const [savingSubjects, setSavingSubjects] = useState(false)

  useEffect(() => {
    const fetchGrade = async () => {
      if (!id) return
      setLoading(true)
      const response = await formGradeApi.getById(id)
      if (response.success && response.data) {
        setGrade(response.data)
      } else {
        toast.error(response.message || 'Failed to load grade')
      }
      setLoading(false)
    }
    fetchGrade()
  }, [id])

  // Fetch all subjects in the pool
  useEffect(() => {
    const fetchSubjects = async () => {
      setSubjectsLoading(true)
      const response = await subjectApi.getAll()
      if (response.success && response.data) {
        setSubjects(response.data)
        // TODO: fetch assigned subjects for this grade/form and setAssignedSubjectIds
      }
      setSubjectsLoading(false)
    }
    fetchSubjects()
  }, [])

  // Handler for toggling subject assignment
  const handleToggleSubject = (subjectId: number) => {
    setAssignedSubjectIds((prev) =>
      prev.includes(subjectId)
        ? prev.filter((id) => id !== subjectId)
        : [...prev, subjectId]
    )
  }

  // Handler for saving assignments (placeholder)
  const handleSaveSubjects = async () => {
    setSavingSubjects(true)
    // TODO: Call backend to save assignedSubjectIds for this grade/form
    toast.success('Subject assignments saved (placeholder)')
    setSavingSubjects(false)
  }

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[40vh]">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-white mb-4" />
        <p className="text-lg text-gray-700 dark:text-gray-300">Loading grade...</p>
      </div>
    )
  }

  if (!grade) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[40vh]">
        <p className="text-lg text-red-600 dark:text-red-400 font-semibold">Grade not found.</p>
        <Link href="/admin/forms-grades">
          <Button variant="outline" className="mt-4">Back to Grades</Button>
        </Link>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-8 px-4 max-w-3xl">
      <div className="flex items-center space-x-4 mb-8">
        <Link href={`/admin/forms-grades?school_level_id=${grade.school_level_id}`}>
          <Button variant="outline" size="sm">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Grades
          </Button>
        </Link>
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white flex items-center gap-2">
          {grade.name} <Badge variant={grade.is_active ? 'default' : 'secondary'}>{grade.is_active ? 'Active' : 'Inactive'}</Badge>
        </h1>
        <Button variant="default" size="sm" onClick={() => router.push(`/admin/forms-grades/${grade.id}/edit`)}>
          <Edit className="h-4 w-4 mr-2" />
          Edit
        </Button>
      </div>
      <Card className="w-full shadow-lg border border-gray-200 dark:border-gray-700">
        <CardHeader>
          <CardTitle className="text-xl">Grade Details</CardTitle>
          <CardDescription className="text-gray-500">All information about this grade</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            <div>
              <span className="font-semibold">Code:</span> {grade.code}
            </div>
            <div>
              <span className="font-semibold">Description:</span> {grade.description || '—'}
            </div>
            <div>
              <span className="font-semibold">Display Order:</span> {grade.display_order}
            </div>
            <div>
              <span className="font-semibold">School Level:</span> {grade.school_level?.name || grade.school_level_id}
            </div>
            <div>
              <span className="font-semibold">Created:</span> {new Date(grade.created_at).toLocaleString()}
            </div>
            <div>
              <span className="font-semibold">Updated:</span> {new Date(grade.updated_at).toLocaleString()}
            </div>
            <div>
              <span className="font-semibold">ID:</span> {grade.id}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Subject Assignment Section */}
      <Card className="w-full mt-8">
        <CardHeader>
          <CardTitle className="text-lg">Assign Subjects to this {grade.school_level?.grade_type === 'form' ? 'Form' : 'Grade'}</CardTitle>
          <CardDescription>Select which subjects are available for this {grade.school_level?.grade_type === 'form' ? 'form' : 'grade'}.</CardDescription>
        </CardHeader>
        <CardContent>
          {subjectsLoading ? (
            <div className="text-gray-500">Loading subjects...</div>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {subjects.map((subject) => (
                <label key={subject.id} className="flex items-center space-x-3 p-2 border rounded hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer">
                  <Checkbox
                    checked={assignedSubjectIds.includes(subject.id)}
                    onCheckedChange={() => handleToggleSubject(subject.id)}
                  />
                  <span className="font-medium" style={{ color: subject.color }}>
                    <span className="inline-block w-2 h-2 rounded-full mr-2" style={{ backgroundColor: subject.color }} />
                    {subject.name}
                  </span>
                  <span className="ml-auto text-xs text-gray-400">{subject.description}</span>
                </label>
              ))}
            </div>
          )}
          <div className="flex justify-end mt-6">
            <Button onClick={handleSaveSubjects} disabled={savingSubjects}>
              {savingSubjects ? 'Saving...' : 'Save Assignments'}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
} ===== frontend/src/app/admin/forms-grades/page.tsx =====
'use client'

import { useEffect, useState } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { Plus, Edit, Trash2, Search, RefreshCw, Eye, Filter, GraduationCap, ArrowLeft, Calendar, BookOpen, AlertCircle } from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Label } from '@/components/ui/label'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { toast } from 'sonner'
import { formGradeApi, schoolLevelApi, type FormGrade, type SchoolLevel } from '@/lib/api'
import { DeleteDialog } from '@/components/ui/delete-dialog'
import { safeRoutes, isValidId } from '@/lib/safe-links'

export default function FormsGradesPage() {
  const router = useRouter()
  const [formsGrades, setFormsGrades] = useState<FormGrade[]>([])
  const [schoolLevels, setSchoolLevels] = useState<SchoolLevel[]>([])
  const [loading, setLoading] = useState(true)
  const [searchQuery, setSearchQuery] = useState('')
  const [filteredFormsGrades, setFilteredFormsGrades] = useState<FormGrade[]>([])
  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'inactive'>('all')
  const [schoolLevelFilter, setSchoolLevelFilter] = useState<number | null>(null)
  const [currentSchoolLevel, setCurrentSchoolLevel] = useState<SchoolLevel | null>(null)
  
  // Delete dialog state
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)
  const [deleteLoading, setDeleteLoading] = useState(false)
  const [itemToDelete, setItemToDelete] = useState<FormGrade | null>(null)

  // Load forms/grades and school levels
  const loadData = async () => {
    try {
      setLoading(true)
      
      // Get school level ID from URL params
      const urlParams = new URLSearchParams(window.location.search)
      const schoolLevelIdParam = urlParams.get('school_level_id')
      const schoolLevelId = schoolLevelIdParam ? parseInt(schoolLevelIdParam, 10) : null
      
      console.log('Forms/Grades page - URL params:', { schoolLevelIdParam, schoolLevelId })
      
      // Load school levels for filtering
      const schoolLevelsResponse = await schoolLevelApi.getAll(true)
      if (schoolLevelsResponse.success && schoolLevelsResponse.data) {
        setSchoolLevels(schoolLevelsResponse.data)
        
        // Set current school level if specified and valid
        if (schoolLevelId && isValidId(schoolLevelId)) {
          const schoolLevel = schoolLevelsResponse.data.find((sl: SchoolLevel) => sl.id === schoolLevelId)
          if (schoolLevel) {
            setCurrentSchoolLevel(schoolLevel)
            setSchoolLevelFilter(schoolLevelId)
          } else {
            console.warn(`School level with ID ${schoolLevelId} not found`)
          }
        }
      }
      
      // Load forms/grades
      const includeInactive = statusFilter !== 'active'
      const options: any = { include_inactive: includeInactive }
      
      if (schoolLevelId && isValidId(schoolLevelId)) {
        options.school_level_id = schoolLevelId
      }
      
      console.log('Loading forms/grades with options:', options)
      
      const response = await formGradeApi.getAll(options)
      
      if (response.success && response.data) {
        setFormsGrades(response.data)
        console.log('Loaded forms/grades:', response.data)
      } else {
        throw new Error(response.message || 'Failed to load forms/grades')
      }
    } catch (error: any) {
      console.error('Failed to load forms/grades:', error)
      toast.error(error.message || 'Failed to load forms/grades')
    } finally {
      setLoading(false)
    }
  }

  // Apply filters (search + status + school level)
  useEffect(() => {
    let filtered = formsGrades

    // Apply status filter
    if (statusFilter === 'active') {
      filtered = filtered.filter(fg => fg.is_active)
    } else if (statusFilter === 'inactive') {
      filtered = filtered.filter(fg => !fg.is_active)
    }

    // Apply school level filter
    if (schoolLevelFilter) {
      filtered = filtered.filter(fg => fg.school_level_id === schoolLevelFilter)
    }

    // Apply search filter
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase().trim()
      filtered = filtered.filter(fg =>
        fg.name.toLowerCase().includes(query) ||
        fg.code.toLowerCase().includes(query) ||
        (fg.description && fg.description.toLowerCase().includes(query))
      )
    }

    setFilteredFormsGrades(filtered)
  }, [formsGrades, statusFilter, schoolLevelFilter, searchQuery])

  // Load data on component mount
  useEffect(() => {
    loadData()
  }, [statusFilter])

  // Handle delete
  const handleDelete = async (permanent: boolean = false) => {
    if (!itemToDelete) return

    try {
      setDeleteLoading(true)
      const response = await formGradeApi.delete(itemToDelete.id, !permanent)
      
      if (response.success) {
        toast.success(`Form/Grade ${permanent ? 'permanently deleted' : 'deleted'} successfully`)
        loadData() // Reload the list
        setDeleteDialogOpen(false)
        setItemToDelete(null)
      } else {
        throw new Error(response.message || 'Failed to delete form/grade')
      }
    } catch (error: any) {
      console.error('Failed to delete form/grade:', error)
      toast.error(error.message || 'Failed to delete form/grade')
    } finally {
      setDeleteLoading(false)
    }
  }

  // Safe navigation helpers
  const navigateToTerms = (formGrade: FormGrade) => {
    if (!isValidId(formGrade.id)) {
      console.error('Invalid form/grade ID for terms navigation:', formGrade.id)
      toast.error('Invalid form/grade ID')
      return
    }
    
    try {
      const url = safeRoutes.termsForFormGrade(formGrade.id)
      router.push(url)
    } catch (error: any) {
      console.error('Navigation error:', error)
      toast.error(error.message)
    }
  }

  const navigateToEdit = (formGrade: FormGrade) => {
    if (!isValidId(formGrade.id)) {
      console.error('Invalid form/grade ID for edit navigation:', formGrade.id)
      toast.error('Invalid form/grade ID')
      return
    }
    
    try {
      const url = safeRoutes.editFormGrade(formGrade.id)
      router.push(url)
    } catch (error: any) {
      console.error('Navigation error:', error)
      toast.error(error.message)
    }
  }

  const navigateToView = (formGrade: FormGrade) => {
    if (!isValidId(formGrade.id)) {
      console.error('Invalid form/grade ID for view navigation:', formGrade.id)
      toast.error('Invalid form/grade ID')
      return
    }
    
    try {
      const url = safeRoutes.viewFormGrade(formGrade.id)
      router.push(url)
    } catch (error: any) {
      console.error('Navigation error:', error)
      toast.error(error.message)
    }
  }

  // Calculate stats
  const activeCount = formsGrades.filter(fg => fg.is_active).length
  const inactiveCount = formsGrades.filter(fg => !fg.is_active).length

  return (
    <div className="container mx-auto py-6 px-4">
      {/* Header */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 gap-4">
        <div>
          <div className="flex items-center space-x-2 mb-2">
            {currentSchoolLevel && (
              <Link href="/admin/school-levels">
                <Button variant="outline" size="sm">
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  {currentSchoolLevel.name}
                </Button>
              </Link>
            )}
          </div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
            {currentSchoolLevel ? `${currentSchoolLevel.name} ${currentSchoolLevel.grade_type === 'form' ? 'Forms' : 'Grades'}` : 'All Forms/Grades'}
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            {currentSchoolLevel 
              ? `Manage ${currentSchoolLevel.grade_type === 'form' ? 'forms' : 'grades'} within ${currentSchoolLevel.name}`
              : 'Manage forms and grades within school levels'
            }
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <Button variant="outline" onClick={loadData} disabled={loading}>
            <RefreshCw className={`mr-2 h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
            Refresh
          </Button>
          {/* Safe link generation for new form/grade */}
          {currentSchoolLevel && isValidId(currentSchoolLevel.id) ? (
            <Link href={safeRoutes.newFormGradeForSchoolLevel(currentSchoolLevel.id)}>
              <Button>
                <Plus className="mr-2 h-4 w-4" />
                Add {currentSchoolLevel.grade_type === 'form' ? 'Form' : 'Grade'}
              </Button>
            </Link>
          ) : (
            <Link href="/admin/forms-grades/new">
              <Button>
                <Plus className="mr-2 h-4 w-4" />
                Add Form/Grade
              </Button>
            </Link>
          )}
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total</CardTitle>
            <GraduationCap className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formsGrades.length}</div>
            <p className="text-xs text-muted-foreground">
              {currentSchoolLevel?.grade_type === 'form' ? 'forms' : 'grades'} in total
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active</CardTitle>
            <Eye className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{activeCount}</div>
            <p className="text-xs text-muted-foreground">
              Currently active
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Inactive</CardTitle>
            <Filter className="h-4 w-4 text-gray-400" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-gray-600">{inactiveCount}</div>
            <p className="text-xs text-muted-foreground">
              Currently inactive
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="text-lg">Filters & Search</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Search */}
            <div className="space-y-2">
              <Label htmlFor="search">Search</Label>
              <div className="relative">
                <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  id="search"
                  placeholder="Search by name or code..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-8"
                />
              </div>
            </div>

            {/* Status Filter */}
            <div className="space-y-2">
              <Label>Status</Label>
              <div className="flex space-x-2">
                {(['all', 'active', 'inactive'] as const).map(status => (
                  <Button
                    key={status}
                    variant={statusFilter === status ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => setStatusFilter(status)}
                  >
                    {status.charAt(0).toUpperCase() + status.slice(1)}
                  </Button>
                ))}
              </div>
            </div>

            {/* School Level Filter */}
            {!currentSchoolLevel && (
              <div className="space-y-2">
                <Label>School Level</Label>
                <div className="flex flex-wrap gap-2">
                  <Button
                    variant={schoolLevelFilter === null ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => setSchoolLevelFilter(null)}
                  >
                    All
                  </Button>
                  {schoolLevels.slice(0, 3).map(level => (
                    <Button
                      key={level.id}
                      variant={schoolLevelFilter === level.id ? 'default' : 'outline'}
                      size="sm"
                      onClick={() => setSchoolLevelFilter(level.id)}
                    >
                      {level.name}
                    </Button>
                  ))}
                </div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Forms/Grades List */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>
              {currentSchoolLevel?.grade_type === 'form' ? 'Forms' : 'Grades'} List
            </span>
            <Badge variant="outline">
              {filteredFormsGrades.length} showing
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto"></div>
              <p className="mt-2 text-gray-600">Loading...</p>
            </div>
          ) : filteredFormsGrades.length === 0 ? (
            <div className="text-center py-8">
              <GraduationCap className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                No {statusFilter === 'all' ? '' : statusFilter} {currentSchoolLevel?.grade_type === 'form' ? 'forms' : 'grades'} found
              </h3>
              <p className="text-gray-600 dark:text-gray-400 mb-4">
                {searchQuery 
                  ? `No results found for "${searchQuery}"`
                  : currentSchoolLevel
                  ? `This school level has no ${statusFilter === 'all' ? '' : statusFilter} ${currentSchoolLevel.grade_type === 'form' ? 'forms' : 'grades'} yet.`
                  : `No ${statusFilter === 'all' ? '' : statusFilter} forms/grades found.`
                }
              </p>
              {currentSchoolLevel && isValidId(currentSchoolLevel.id) ? (
                <Link href={safeRoutes.newFormGradeForSchoolLevel(currentSchoolLevel.id)}>
                  <Button>
                    <Plus className="mr-2 h-4 w-4" />
                    Create First {currentSchoolLevel.grade_type === 'form' ? 'Form' : 'Grade'}
                  </Button>
                </Link>
              ) : (
                <Link href="/admin/forms-grades/new">
                  <Button>
                    <Plus className="mr-2 h-4 w-4" />
                    Create Form/Grade
                  </Button>
                </Link>
              )}
            </div>
          ) : (
            <div className="space-y-4">
              {filteredFormsGrades
                .sort((a, b) => a.display_order - b.display_order)
                .map((formGrade) => {
                  // Validate form/grade ID before rendering
                  const hasValidId = isValidId(formGrade.id)
                  
                  if (!hasValidId) {
                    console.error('Invalid form/grade ID in list:', formGrade)
                  }
                  
                  return (
                    <Card key={formGrade.id || `invalid-${Math.random()}`} className="border hover:border-blue-200 transition-colors">
                      <CardContent className="p-6">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-4">
                            <div className="bg-blue-100 dark:bg-blue-900 p-3 rounded-lg">
                              <GraduationCap className="h-6 w-6 text-blue-600 dark:text-blue-400" />
                            </div>
                            
                            <div>
                              <div className="flex items-center space-x-2 mb-1">
                                <h3 className="font-semibold text-gray-900 dark:text-white">
                                  {formGrade.name}
                                </h3>
                                <Badge variant="secondary" className="text-xs">
                                  {formGrade.code}
                                </Badge>
                                <Badge 
                                  variant={formGrade.is_active ? "default" : "secondary"}
                                  className={formGrade.is_active ? "bg-green-100 text-green-800" : ""}
                                >
                                  {formGrade.is_active ? 'Active' : 'Inactive'}
                                </Badge>
                                {!hasValidId && (
                                  <Badge variant="destructive" className="text-xs">
                                    Invalid ID
                                  </Badge>
                                )}
                              </div>
                              
                              <div className="flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400">
                                <span>Order: {formGrade.display_order}</span>
                                {formGrade.school_level && (
                                  <span>{formGrade.school_level.name}</span>
                                )}
                                <span>ID: {formGrade.id}</span>
                              </div>
                            </div>
                          </div>

                          <div className="flex items-center space-x-2">
                            {hasValidId ? (
                              <>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => navigateToTerms(formGrade)}
                                >
                                  <Calendar className="mr-2 h-4 w-4" />
                                  Terms
                                </Button>
                                
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => navigateToView(formGrade)}
                                >
                                  <Eye className="h-4 w-4" />
                                </Button>
                                
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => navigateToEdit(formGrade)}
                                >
                                  <Edit className="h-4 w-4" />
                                </Button>
                                
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => {
                                    setItemToDelete(formGrade)
                                    setDeleteDialogOpen(true)
                                  }}
                                  className="text-red-600 hover:text-red-700"
                                >
                                  <Trash2 className="h-4 w-4" />
                                </Button>
                              </>
                            ) : (
                              <Alert className="w-48">
                                <AlertCircle className="h-4 w-4" />
                                <AlertDescription className="text-xs">
                                  Invalid ID - cannot navigate
                                </AlertDescription>
                              </Alert>
                            )}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  )
                })}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Delete Dialog */}
      <DeleteDialog
        open={deleteDialogOpen}
        onOpenChange={setDeleteDialogOpen}
        onConfirm={handleDelete}
        loading={deleteLoading}
        title="Delete Form/Grade"
        description={`Are you sure you want to delete "${itemToDelete?.name}"? This action can be undone by reactivating it later.`}
        itemName={itemToDelete?.name || ''}
      />
    </div>
  )
}===== frontend/src/app/admin/forms-grades/new/page.tsx =====
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { ArrowLeft, Save, Loader2 } from 'lucide-react'
import Link from 'next/link'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Checkbox } from '@/components/ui/checkbox'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { toast } from 'sonner'
import { formGradeApi, type FormGradeCreate, type Section } from '@/lib/api'

export default function NewFormGradePage() {
  const router = useRouter()
  const [loading, setLoading] = useState(false)
  
  const [formData, setFormData] = useState<FormGradeCreate>({
    name: '',
    code: '',
    description: '',
    display_order: 0,
    school_level_id: 1,
    is_active: true
  })

  // Get school level ID from URL params
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search)
    const schoolLevelId = urlParams.get('school_level_id')
    if (schoolLevelId) {
      setFormData(prev => ({
        ...prev,
        school_level_id: parseInt(schoolLevelId)
      }))
    }
  }, [])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!formData.name.trim()) {
      toast.error('Name is required')
      return
    }

    if (!formData.code.trim()) {
      toast.error('Code is required')
      return
    }

    if (!formData.school_level_id) {
      toast.error('School Level is required')
      return
    }

    try {
      setLoading(true)
      const response = await formGradeApi.create(formData)
      
      if (response.success && response.data) {
        toast.success('Grade created successfully')
        // Navigate back to the forms/grades list
        const urlParams = new URLSearchParams(window.location.search)
        const schoolLevelId = urlParams.get('school_level_id')
        if (schoolLevelId) {
          router.push(`/admin/forms-grades/?school_level_id=${schoolLevelId}`)
        } else {
          router.push('/admin/forms-grades')
        }
      } else {
        throw new Error(response.message || 'Failed to create grade')
      }
    } catch (error: any) {
      console.error('Failed to create grade:', error)
      toast.error(error.message || 'Failed to create grade')
    } finally {
      setLoading(false)
    }
  }

  const handleInputChange = (field: keyof FormGradeCreate, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  return (
    <div className="container mx-auto py-6 px-4">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Link href="/admin/forms-grades">
            <Button variant="outline" size="sm">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Grades
            </Button>
          </Link>
          <div>
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
              Create New Grade
            </h1>
            <p className="text-gray-600 dark:text-gray-400 mt-1">
              Add a new grade to this school level
            </p>
          </div>
        </div>
      </div>

      {/* Form */}
      <Card className="max-w-2xl">
        <CardHeader>
          <CardTitle>Grade Information</CardTitle>
          <CardDescription>
            Fill in the details below to create a new grade
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Name */}
            <div className="space-y-2">
              <Label htmlFor="name">Name *</Label>
              <Input
                id="name"
                placeholder="e.g., Grade 1, Form 1, Class 1"
                value={formData.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
                required
              />
            </div>

            {/* Code */}
            <div className="space-y-2">
              <Label htmlFor="code">Code *</Label>
              <Input
                id="code"
                placeholder="e.g., G1, F1, C1"
                value={formData.code}
                onChange={(e) => handleInputChange('code', e.target.value)}
                required
              />
            </div>

            {/* Description */}
            <div className="space-y-2">
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                placeholder="Optional description of the grade"
                value={formData.description || ''}
                onChange={(e) => handleInputChange('description', e.target.value)}
                rows={3}
              />
            </div>

            {/* Active Status */}
            <div className="flex items-center space-x-2">
              <Checkbox
                id="is_active"
                checked={formData.is_active}
                onCheckedChange={(checked) => handleInputChange('is_active', checked)}
              />
              <Label htmlFor="is_active">Active</Label>
            </div>

            {/* Submit Button */}
            <div className="flex items-center space-x-4 pt-4">
              <Button type="submit" disabled={loading}>
                {loading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Creating...
                  </>
                ) : (
                  <>
                    <Save className="mr-2 h-4 w-4" />
                    Create Grade
                  </>
                )}
              </Button>
              <Link href="/admin/forms-grades">
                <Button type="button" variant="outline">
                  Cancel
                </Button>
              </Link>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  )
} ===== frontend/src/app/admin/layout.tsx =====
'use client'

import { useState } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet'
import { 
  LayoutDashboard,
  GraduationCap,
  BarChart3,
  Settings,
  Menu,
  Bell,
  ChevronRight,
  Home,
  Plus,
  Eye
} from 'lucide-react'

interface AdminLayoutProps {
  children: React.ReactNode
}

// Simplified navigation focused on school-level flow
const navigation = [
  {
    id: 'dashboard',
    name: 'Dashboard',
    href: '/admin',
    icon: LayoutDashboard,
    description: 'Overview & system health',
    color: 'bg-blue-500'
  },
  {
    id: 'school-levels',
    name: 'School Management',
    href: '/admin/school-levels',
    icon: GraduationCap,
    description: 'Manage all educational levels',
    color: 'bg-emerald-500'
  },
  {
    id: 'reports',
    name: 'Reports & Analytics',
    href: '/admin/reports',
    icon: BarChart3,
    description: 'System reports and insights',
    color: 'bg-purple-500'
  },
  {
    id: 'settings',
    name: 'System Settings',
    href: '/admin/settings',
    icon: Settings,
    description: 'Configure system preferences',
    color: 'bg-gray-500'
  }
]

function Sidebar() {
  const pathname = usePathname()
  
  return (
    <div className="flex h-full flex-col bg-white border-r border-gray-200">
      {/* Logo & Brand */}
      <div className="p-6 border-b border-gray-200">
        <div className="flex items-center space-x-3">
          <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center">
            <GraduationCap className="w-6 h-6 text-white" />
          </div>
          <div>
            <h1 className="text-xl font-bold text-gray-900">EduScheme</h1>
            <p className="text-sm text-gray-500">Admin Portal</p>
          </div>
        </div>
      </div>

      {/* Main Navigation */}
      <nav className="flex-1 p-4 space-y-2">
        {navigation.map((item) => {
          const isActive = pathname === item.href || (item.href !== '/admin' && pathname.startsWith(item.href))
          
          return (
            <Link
              key={item.id}
              href={item.href}
              className={cn(
                "group flex items-center px-3 py-4 text-sm font-medium rounded-xl transition-all duration-200",
                isActive
                  ? "bg-gray-100 text-gray-900 shadow-sm"
                  : "text-gray-600 hover:bg-gray-50 hover:text-gray-900"
              )}
            >
              <div className={cn(
                "w-12 h-12 rounded-xl flex items-center justify-center mr-4 transition-colors",
                isActive ? item.color : "bg-gray-100 group-hover:bg-gray-200"
              )}>
                <item.icon className={cn(
                  "w-6 h-6",
                  isActive ? "text-white" : "text-gray-500"
                )} />
              </div>
              <div className="flex-1">
                <div className="font-semibold">{item.name}</div>
                <div className="text-xs text-gray-400 mt-1">{item.description}</div>
              </div>
            </Link>
          )
        })}
      </nav>

      {/* Quick Actions Section */}
      <div className="p-4 border-t border-gray-200 space-y-3">
        <div className="text-xs font-medium text-gray-500 uppercase tracking-wide mb-2">
          Quick Actions
        </div>
        
        <Link href="/admin/school-levels/new">
          <Button variant="outline" size="sm" className="w-full justify-start">
            <Plus className="w-4 h-4 mr-2" />
            New School Level
          </Button>
        </Link>
        
        <Link href="/admin/hierarchy">
          <Button variant="outline" size="sm" className="w-full justify-start">
            <Eye className="w-4 h-4 mr-2" />
            View Hierarchy
          </Button>
        </Link>
      </div>

      {/* System Status */}
      <div className="p-4 border-t border-gray-200">
        <div className="p-3 bg-green-50 rounded-lg">
          <div className="flex items-center">
            <div className="w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse" />
            <span className="text-sm font-medium text-green-800">System Online</span>
          </div>
          <p className="text-xs text-green-600 mt-1">All services operational</p>
        </div>
      </div>
    </div>
  )
}

function Header() {
  const pathname = usePathname()
  
  // Get page title from pathname
  const getPageTitle = () => {
    if (pathname === '/admin') return 'Dashboard'
    
    const segments = pathname.split('/').filter(Boolean)
    if (segments.length >= 2) {
      const section = segments[1]
      if (section === 'school-levels') return 'School Management'
      if (section === 'forms-grades') return 'Forms & Grades'
      if (section === 'terms') return 'Academic Terms'
      if (section === 'subjects') return 'Subjects'
      if (section === 'topics') return 'Topics'
      if (section === 'subtopics') return 'Subtopics'
      if (section === 'reports') return 'Reports & Analytics'
      if (section === 'settings') return 'System Settings'
    }
    
    return 'Admin'
  }

  return (
    <header className="bg-white border-b border-gray-200 px-6 py-4">
      <div className="flex items-center justify-between">
        {/* Mobile Menu */}
        <div className="lg:hidden">
          <Sheet>
            <SheetTrigger asChild>
              <Button variant="ghost" size="icon">
                <Menu className="h-5 w-5" />
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-80 p-0">
              <Sidebar />
            </SheetContent>
          </Sheet>
        </div>

        {/* Enhanced Breadcrumb */}
        <div className="flex items-center space-x-2 text-sm">
          <Home className="w-4 h-4 text-gray-400" />
          <ChevronRight className="w-4 h-4 text-gray-400" />
          <span className="text-gray-600">Admin</span>
          {pathname !== '/admin' && (
            <>
              <ChevronRight className="w-4 h-4 text-gray-400" />
              <span className="font-medium text-gray-900">{getPageTitle()}</span>
            </>
          )}
        </div>

        {/* User Section */}
        <div className="flex items-center space-x-3">
          {/* Notifications */}
          <Button variant="ghost" size="icon" className="relative">
            <Bell className="h-5 w-5" />
            <Badge className="absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 text-xs bg-red-500">
              3
            </Badge>
          </Button>

          {/* User Profile */}
          <div className="flex items-center space-x-3">
            <div className="hidden sm:block text-right">
              <div className="text-sm font-medium text-gray-900">Admin User</div>
              <div className="text-xs text-gray-500">System Administrator</div>
            </div>
            <div className="h-9 w-9 rounded-full bg-gradient-to-br from-blue-600 to-purple-600 flex items-center justify-center text-white text-sm font-medium">
              AU
            </div>
          </div>
        </div>
      </div>
    </header>
  )
}

export default function AdminLayout({ children }: AdminLayoutProps) {
  return (
    <div className="flex h-screen bg-gray-50">
      {/* Always Visible Desktop Sidebar */}
      <div className="hidden lg:flex lg:w-80 lg:flex-col lg:fixed lg:inset-y-0">
        <Sidebar />
      </div>

      {/* Main Content with Left Margin for Sidebar */}
      <div className="flex flex-1 flex-col lg:ml-80">
        <Header />
        <main className="flex-1 overflow-auto bg-gray-50">
          {children}
        </main>
      </div>
    </div>
  )
}===== frontend/src/app/admin/page.tsx =====
'use client'

import { useEffect, useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Progress } from '@/components/ui/progress'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  GraduationCap,
  Users,
  Calendar,
  BookMarked,
  FileText,
  List,
  Plus,
  ArrowRight,
  AlertCircle,
  CheckCircle2,
  Target,
  BarChart3,
  Eye,
  Activity,
  RefreshCw,
  Wifi,
  WifiOff,
  ServerOff
} from 'lucide-react'
import Link from 'next/link'
import { cn } from '@/lib/utils'

interface DashboardStats {
  total_school_levels: number
  total_forms_grades: number
  total_terms: number
  total_subjects: number
  total_topics: number
  total_subtopics: number
  active_school_levels: number
  active_forms_grades: number
  active_terms: number
  active_subjects: number
  active_topics: number
  active_subtopics: number
}

interface SystemHealth {
  status: 'excellent' | 'good' | 'warning' | 'critical'
  score: number
  issues: string[]
  recommendations: string[]
}

const AdminDashboard = () => {
  const [stats, setStats] = useState<DashboardStats | null>(null)
  const [systemHealth, setSystemHealth] = useState<SystemHealth | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'failed'>('connecting')

  const fetchDashboardData = async () => {
    try {
      setLoading(true)
      setError(null)
      setConnectionStatus('connecting')
      
      console.log('Fetching dashboard data from:', 'http://localhost:8000/api/v1/admin/statistics/')
      
      const response = await fetch('http://localhost:8000/api/v1/admin/statistics/', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      })

      console.log('Response status:', response.status)
      console.log('Response ok:', response.ok)

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const data = await response.json()
      console.log('API Response:', data)
      
      if (data.success && data.data) {
        setStats(data.data)
        calculateSystemHealth(data.data)
        setConnectionStatus('connected')
      } else {
        throw new Error(data.message || 'API returned unsuccessful response')
      }
    } catch (err: any) {
      console.error('Dashboard error:', err)
      
      // More specific error messages
      if (err.name === 'TypeError' && err.message.includes('fetch')) {
        setError('Cannot connect to backend server. Make sure your FastAPI server is running on localhost:8000')
      } else if (err.message?.includes('CORS')) {
        setError('CORS error: Backend server needs to allow requests from localhost:3000')
      } else if (err.message?.includes('ERR_CONNECTION_REFUSED')) {
        setError('Backend server is not running. Please start your FastAPI server.')
      } else {
        setError(`Connection error: ${err.message || 'Unknown error occurred'}`)
      }
      setConnectionStatus('failed')
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchDashboardData()
  }, [])

  const calculateSystemHealth = (data: DashboardStats) => {
    let score = 0
    const issues: string[] = []
    const recommendations: string[] = []

    if (data.total_school_levels > 0) {
      score += 25
      if (data.total_forms_grades > 0) {
        score += 20
        if (data.total_terms > 0) {
          score += 20
          if (data.total_subjects > 0) {
            score += 20
            if (data.total_topics > 0) {
              score += 10
              if (data.total_subtopics > 0) {
                score += 5
              } else {
                recommendations.push('Add subtopics for detailed lesson planning')
              }
            } else {
              issues.push('No curriculum topics created')
            }
          } else {
            issues.push('No subjects added to terms')
          }
        } else {
          issues.push('No academic terms configured')
        }
      } else {
        issues.push('No forms/grades created under school levels')
      }
    } else {
      issues.push('No school levels configured - this is the foundation of your system')
    }

    let status: SystemHealth['status'] = 'critical'
    if (score >= 90) status = 'excellent'
    else if (score >= 70) status = 'good'
    else if (score >= 40) status = 'warning'

    setSystemHealth({ status, score, issues, recommendations })
  }

  const statCards = [
    {
      title: 'School Levels',
      value: stats?.active_school_levels || 0,
      total: stats?.total_school_levels || 0,
      description: 'Foundation of your system',
      icon: GraduationCap,
      color: 'text-blue-600',
      bgColor: 'bg-blue-100',
      href: '/admin/school-levels',
      isFoundation: true
    },
    {
      title: 'Forms & Grades',
      value: stats?.active_forms_grades || 0,
      total: stats?.total_forms_grades || 0,
      description: 'Grade levels within schools',
      icon: Users,
      color: 'text-emerald-600',
      bgColor: 'bg-emerald-100',
      href: '/admin/school-levels',
      parentCount: stats?.total_school_levels || 0
    },
    {
      title: 'Academic Terms',
      value: stats?.active_terms || 0,
      total: stats?.total_terms || 0,
      description: 'Terms within grades',
      icon: Calendar,
      color: 'text-purple-600',
      bgColor: 'bg-purple-100',
      href: '/admin/school-levels',
      parentCount: stats?.total_forms_grades || 0
    },
    {
      title: 'Subjects',
      value: stats?.active_subjects || 0,
      total: stats?.total_subjects || 0,
      description: 'Subjects within terms',
      icon: BookMarked,
      color: 'text-orange-600',
      bgColor: 'bg-orange-100',
      href: '/admin/school-levels',
      parentCount: stats?.total_terms || 0
    },
    {
      title: 'Topics',
      value: stats?.active_topics || 0,
      total: stats?.total_topics || 0,
      description: 'Topics within subjects',
      icon: FileText,
      color: 'text-rose-600',
      bgColor: 'bg-rose-100',
      href: '/admin/school-levels',
      parentCount: stats?.total_subjects || 0
    },
    {
      title: 'Subtopics',
      value: stats?.active_subtopics || 0,
      total: stats?.total_subtopics || 0,
      description: 'Detailed lessons',
      icon: List,
      color: 'text-indigo-600',
      bgColor: 'bg-indigo-100',
      href: '/admin/school-levels',
      parentCount: stats?.total_topics || 0
    }
  ]

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center space-y-4">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
          <div className="space-y-2">
            <p className="text-lg font-medium text-gray-900">Connecting to Backend</p>
            <p className="text-gray-500">Fetching your school data from localhost:8000...</p>
            <div className="text-xs text-gray-400 bg-gray-100 p-2 rounded">
              API Endpoint: /api/v1/admin/statistics/
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="p-6">
        <Alert className="border-red-200 bg-red-50 mb-6">
          <ServerOff className="h-4 w-4 text-red-600" />
          <AlertDescription className="text-red-800">
            <div className="space-y-3">
              <p className="font-medium">Backend Connection Failed</p>
              <p className="text-sm">{error}</p>
              
              <div className="space-y-2 text-sm">
                <p className="font-medium">Troubleshooting Steps:</p>
                <ol className="list-decimal list-inside space-y-1 ml-4">
                  <li>Make sure your FastAPI server is running: <code className="bg-red-100 px-1 rounded">uvicorn main:app --reload</code></li>
                  <li>Check if backend is accessible at: <a href="http://localhost:8000/docs" target="_blank" className="text-red-700 underline">http://localhost:8000/docs</a></li>
                  <li>Test the API endpoint directly: <a href="http://localhost:8000/api/v1/admin/statistics/" target="_blank" className="text-red-700 underline">http://localhost:8000/api/v1/admin/statistics/</a></li>
                  <li>Add CORS configuration to your FastAPI backend</li>
                </ol>
              </div>
              
              <div className="flex space-x-2">
                <Button 
                  size="sm" 
                  variant="outline" 
                  onClick={fetchDashboardData}
                  className="border-red-300 text-red-700 hover:bg-red-100"
                >
                  <RefreshCw className="w-4 h-4 mr-2" />
                  Retry Connection
                </Button>
                <Button 
                  size="sm" 
                  variant="outline"
                  onClick={() => window.open('http://localhost:8000/docs', '_blank')}
                  className="border-red-300 text-red-700 hover:bg-red-100"
                >
                  Check Backend API
                </Button>
              </div>
            </div>
          </AlertDescription>
        </Alert>

        {/* Offline Mode */}
        <Card className="border-yellow-200 bg-yellow-50">
          <CardHeader>
            <CardTitle className="text-yellow-900 flex items-center space-x-2">
              <WifiOff className="w-5 h-5" />
              <span>Offline Mode</span>
            </CardTitle>
            <CardDescription className="text-yellow-700">
              You can still access the management interface, but data won't be loaded until backend connection is restored.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 gap-4">
              <Link href="/admin/school-levels">
                <Button variant="outline" className="w-full justify-start">
                  <GraduationCap className="w-4 h-4 mr-2" />
                  Manage School Levels
                </Button>
              </Link>
              <Link href="/admin/school-levels/new">
                <Button className="w-full justify-start bg-blue-600 hover:bg-blue-700">
                  <Plus className="w-4 h-4 mr-2" />
                  Add School Level
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="p-6 space-y-8">
      {/* Header with Connection Status */}
      <div className="flex justify-between items-start">
        <div className="space-y-2">
          <div className="flex items-center space-x-3">
            <h1 className="text-4xl font-bold text-gray-900">School Management Hub</h1>
            <div className="flex items-center space-x-2">
              {systemHealth && (
                <Badge className={cn(
                  "px-3 py-1",
                  systemHealth.status === 'excellent' && "bg-green-100 text-green-800 border-green-200",
                  systemHealth.status === 'good' && "bg-blue-100 text-blue-800 border-blue-200",
                  systemHealth.status === 'warning' && "bg-yellow-100 text-yellow-800 border-yellow-200",
                  systemHealth.status === 'critical' && "bg-red-100 text-red-800 border-red-200"
                )}>
                  <Activity className="w-3 h-3 mr-1" />
                  {systemHealth.status}
                </Badge>
              )}
              <Badge className="px-2 py-1 bg-green-100 text-green-800 border-green-200">
                <Wifi className="w-3 h-3 mr-1" />
                Connected
              </Badge>
            </div>
          </div>
          <p className="text-lg text-gray-600">
            Manage your complete educational hierarchy from school levels down to lessons
          </p>
        </div>

        <div className="flex space-x-3">
          <Button variant="outline" onClick={fetchDashboardData}>
            <RefreshCw className="w-4 h-4 mr-2" />
            Refresh Data
          </Button>
          <Link href="/admin/hierarchy">
            <Button variant="outline">
              <Eye className="w-4 h-4 mr-2" />
              View Hierarchy
            </Button>
          </Link>
          <Link href="/admin/school-levels/new">
            <Button className="bg-blue-600 hover:bg-blue-700">
              <Plus className="w-4 h-4 mr-2" />
              Add School Level
            </Button>
          </Link>
        </div>
      </div>

      {/* System Health Alert */}
      {systemHealth && systemHealth.status !== 'excellent' && (
        <Alert className={cn(
          "border-l-4",
          systemHealth.status === 'critical' && "border-red-500 bg-red-50",
          systemHealth.status === 'warning' && "border-yellow-500 bg-yellow-50",
          systemHealth.status === 'good' && "border-blue-500 bg-blue-50"
        )}>
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="font-medium">System Setup: {systemHealth.score}/100</span>
                <Progress value={systemHealth.score} className="w-32" />
              </div>
              {systemHealth.issues.length > 0 && (
                <div className="text-sm">
                  <span className="font-medium">Next steps:</span> {systemHealth.issues.join(', ')}
                </div>
              )}
            </div>
          </AlertDescription>
        </Alert>
      )}

      {/* Hierarchy Flow Visualization */}
      <Card className="border-blue-200 bg-gradient-to-r from-blue-50 to-indigo-50">
        <CardHeader>
          <CardTitle className="text-blue-900 flex items-center space-x-2">
            <Target className="w-5 h-5" />
            <span>Educational Hierarchy Overview</span>
          </CardTitle>
          <CardDescription className="text-blue-700">
            Your complete school structure flows from School Levels down to individual lessons
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between p-4 bg-white rounded-lg">
            <div className="flex items-center space-x-4 overflow-x-auto">
              {statCards.slice(0, 6).map((card, index) => (
                <div key={index} className="flex items-center flex-shrink-0">
                  <div className="text-center">
                    <div className={cn("w-12 h-12 rounded-xl flex items-center justify-center mb-2", card.bgColor)}>
                      <card.icon className={cn("w-6 h-6", card.color)} />
                    </div>
                    <div className="text-lg font-bold text-gray-900">{card.value}</div>
                    <div className="text-xs text-gray-600">{card.title}</div>
                  </div>
                  {index < 5 && (
                    <ArrowRight className="w-4 h-4 text-gray-400 mx-3" />
                  )}
                </div>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Main Stats Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {statCards.map((card, index) => (
          <Link key={index} href={card.href}>
            <Card className={cn(
              "hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 cursor-pointer",
              card.isFoundation && "ring-2 ring-blue-200"
            )}>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-gray-600">
                  {card.title}
                  {card.isFoundation && (
                    <Badge variant="secondary" className="ml-2 text-xs">Foundation</Badge>
                  )}
                </CardTitle>
                <div className={cn("h-10 w-10 rounded-xl flex items-center justify-center", card.bgColor)}>
                  <card.icon className={cn("h-5 w-5", card.color)} />
                </div>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-baseline gap-2">
                  <span className="text-3xl font-bold text-gray-900">{card.value}</span>
                  <span className="text-xs text-gray-500">active</span>
                  <span className="text-lg text-gray-400">/</span>
                  <span className="text-lg font-semibold text-gray-500">{card.total}</span>
                  <span className="text-xs text-gray-400">total</span>
                </div>
                <p className="text-sm text-gray-600">{card.description}</p>
                
                {/* Show ratio to parent level */}
                {card.parentCount !== undefined && card.parentCount > 0 && (
                  <div className="space-y-1">
                    <div className="flex justify-between text-xs text-gray-500">
                      <span>Average per parent</span>
                      <span>{(card.total / card.parentCount).toFixed(1)}</span>
                    </div>
                    <Progress 
                      value={Math.min((card.total / card.parentCount / 3) * 100, 100)} 
                      className="h-1"
                    />
                  </div>
                )}
              </CardContent>
            </Card>
          </Link>
        ))}
      </div>

      {/* Primary Action */}
      <Card className="border-emerald-200 bg-gradient-to-r from-emerald-50 to-green-50">
        <CardHeader>
          <CardTitle className="text-emerald-900 flex items-center space-x-2">
            <GraduationCap className="w-6 h-6" />
            <span>School Levels - Your Starting Point</span>
          </CardTitle>
          <CardDescription className="text-emerald-700">
            Everything in your system starts with school levels. Create and manage your educational structure here.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between">
            <div className="space-y-2">
              <p className="text-sm text-gray-600">
                {stats?.total_school_levels === 0 
                  ? "No school levels created yet. Start by creating your first school level."
                  : `You have ${stats?.total_school_levels} school level${stats?.total_school_levels === 1 ? '' : 's'} configured.`
                }
              </p>
              <div className="flex space-x-2">
                <Link href="/admin/school-levels">
                  <Button variant="outline">
                    <Eye className="w-4 h-4 mr-2" />
                    Manage School Levels
                  </Button>
                </Link>
                <Link href="/admin/school-levels/new">
                  <Button className="bg-emerald-600 hover:bg-emerald-700">
                    <Plus className="w-4 h-4 mr-2" />
                    {stats?.total_school_levels === 0 ? 'Create First School Level' : 'Add School Level'}
                  </Button>
                </Link>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* System Health Overview */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Target className="w-5 h-5 text-green-600" />
              <span>System Health</span>
            </CardTitle>
            <CardDescription>Overall setup progress</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {systemHealth && (
              <>
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Setup Progress</span>
                  <span className="text-2xl font-bold">{systemHealth.score}/100</span>
                </div>
                <Progress value={systemHealth.score} className="h-2" />
                
                <div className="space-y-2">
                  {systemHealth.score >= 25 && (
                    <div className="flex items-center text-sm">
                      <CheckCircle2 className="w-4 h-4 text-green-500 mr-2" />
                      <span>School levels configured</span>
                    </div>
                  )}
                  {systemHealth.issues.map((issue, idx) => (
                    <div key={idx} className="flex items-center text-sm text-gray-600">
                      <AlertCircle className="w-4 h-4 text-yellow-500 mr-2" />
                      <span>{issue}</span>
                    </div>
                  ))}
                </div>
              </>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <BarChart3 className="w-5 h-5 text-blue-600" />
              <span>Content Overview</span>
            </CardTitle>
            <CardDescription>Distribution of educational content</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center p-3 bg-blue-50 rounded-lg">
                <div className="text-2xl font-bold text-blue-600">
                  {stats && stats.total_school_levels > 0 
                    ? (stats.total_forms_grades / stats.total_school_levels).toFixed(1)
                    : '0'
                  }
                </div>
                <div className="text-xs text-blue-700">Grades per School</div>
              </div>
              <div className="text-center p-3 bg-green-50 rounded-lg">
                <div className="text-2xl font-bold text-green-600">
                  {stats && stats.total_forms_grades > 0 
                    ? (stats.total_subjects / stats.total_forms_grades).toFixed(1)
                    : '0'
                  }
                </div>
                <div className="text-xs text-green-700">Subjects per Grade</div>
              </div>
              <div className="text-center p-3 bg-purple-50 rounded-lg">
                <div className="text-2xl font-bold text-purple-600">
                  {stats && stats.total_subjects > 0 
                    ? (stats.total_topics / stats.total_subjects).toFixed(1)
                    : '0'
                  }
                </div>
                <div className="text-xs text-purple-700">Topics per Subject</div>
              </div>
              <div className="text-center p-3 bg-orange-50 rounded-lg">
                <div className="text-2xl font-bold text-orange-600">
                  {stats && stats.total_topics > 0 
                    ? (stats.total_subtopics / stats.total_topics).toFixed(1)
                    : '0'
                  }
                </div>
                <div className="text-xs text-orange-700">Lessons per Topic</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

export default AdminDashboard===== frontend/src/app/admin/subject-card.tsx =====
'use client'

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { cn } from '@/lib/utils'
import { 
  MoreHorizontal, 
  Edit, 
  Trash2, 
  Eye, 
  Copy,
  BookOpen,
  Calculator,
  Globe,
  Atom,
  Palette,
  Music,
  Trophy,
  Heart,
  Cpu,
  Languages
} from 'lucide-react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu'
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog'

interface Subject {
  id: number
  name: string
  code: string
  description?: string
  color: string
  icon: string
  animation_type: string
  display_order: number
  term_id: number
  is_active: boolean
  created_at: string
  updated_at: string
}

interface SubjectCardProps {
  subject: Subject
  onEdit?: (subject: Subject) => void
  onDelete?: (id: number) => void
  onView?: (subject: Subject) => void
  onDuplicate?: (subject: Subject) => void
  className?: string
}

const iconMap = {
  book: BookOpen,
  calculator: Calculator,
  globe: Globe,
  atom: Atom,
  palette: Palette,
  music: Music,
  trophy: Trophy,
  heart: Heart,
  cpu: Cpu,
  languages: Languages,
}

const animationClasses = {
  bounce: 'hover:animate-bounce',
  pulse: 'hover:animate-pulse',
  shake: 'hover:animate-shake',
  swing: 'hover:animate-swing',
  flash: 'hover:animate-flash',
  fade: 'hover:animate-fade-in',
}

export function SubjectCard({ 
  subject, 
  onEdit, 
  onDelete, 
  onView, 
  onDuplicate,
  className 
}: SubjectCardProps) {
  const [showDeleteDialog, setShowDeleteDialog] = useState(false)
  const [isAnimating, setIsAnimating] = useState(false)

  const IconComponent = iconMap[subject.icon as keyof typeof iconMap] || BookOpen
  const animationClass = animationClasses[subject.animation_type as keyof typeof animationClasses] || ''

  const handleCardClick = () => {
    if (onView) {
      onView(subject)
    }
  }

  const handleAnimationTrigger = () => {
    setIsAnimating(true)
    setTimeout(() => setIsAnimating(false), 1000)
  }

  const getContrastColor = (hexColor: string) => {
    const r = parseInt(hexColor.slice(1, 3), 16)
    const g = parseInt(hexColor.slice(3, 5), 16)
    const b = parseInt(hexColor.slice(5, 7), 16)
    const brightness = (r * 299 + g * 587 + b * 114) / 1000
    return brightness > 128 ? '#000000' : '#ffffff'
  }

  return (
    <>
      <Card 
        className={cn(
          "group cursor-pointer transition-all duration-300 hover:shadow-lg hover:scale-105 relative overflow-hidden",
          !subject.is_active && "opacity-60",
          className
        )}
        onClick={handleCardClick}
      >
        {/* Color accent bar */}
        <div 
          className="absolute top-0 left-0 right-0 h-1"
          style={{ backgroundColor: subject.color }}
        />

        <CardHeader className="pb-3">
          <div className="flex items-start justify-between">
            <div className="flex items-center space-x-3">
              {/* Subject Icon with color background */}
              <div 
                className={cn(
                  "h-12 w-12 rounded-lg flex items-center justify-center transition-all duration-300",
                  animationClass,
                  isAnimating && `subject-${subject.animation_type}`
                )}
                style={{ 
                  backgroundColor: subject.color,
                  color: getContrastColor(subject.color)
                }}
                onClick={(e) => {
                  e.stopPropagation()
                  handleAnimationTrigger()
                }}
              >
                <IconComponent className="h-6 w-6" />
              </div>

              <div className="flex-1">
                <div className="flex items-center space-x-2 mb-1">
                  <CardTitle className="text-lg font-semibold text-gray-900 dark:text-white">
                    {subject.name}
                  </CardTitle>
                  <Badge 
                    variant="secondary" 
                    className="text-xs"
                    style={{ 
                      backgroundColor: `${subject.color}20`,
                      color: subject.color,
                      borderColor: `${subject.color}40`
                    }}
                  >
                    {subject.code}
                  </Badge>
                </div>
                {!subject.is_active && (
                  <Badge variant="destructive" className="text-xs">
                    Inactive
                  </Badge>
                )}
              </div>
            </div>

            {/* Actions dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>
                <Button 
                  variant="ghost" 
                  size="icon"
                  className="h-8 w-8 opacity-0 group-hover:opacity-100 transition-opacity"
                >
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-48">
                {onView && (
                  <DropdownMenuItem onClick={() => onView(subject)}>
                    <Eye className="h-4 w-4 mr-2" />
                    View Details
                  </DropdownMenuItem>
                )}
                {onEdit && (
                  <DropdownMenuItem onClick={() => onEdit(subject)}>
                    <Edit className="h-4 w-4 mr-2" />
                    Edit Subject
                  </DropdownMenuItem>
                )}
                {onDuplicate && (
                  <DropdownMenuItem onClick={() => onDuplicate(subject)}>
                    <Copy className="h-4 w-4 mr-2" />
                    Duplicate
                  </DropdownMenuItem>
                )}
                <DropdownMenuSeparator />
                {onDelete && (
                  <DropdownMenuItem 
                    onClick={() => setShowDeleteDialog(true)}
                    className="text-red-600 focus:text-red-600"
                  >
                    <Trash2 className="h-4 w-4 mr-2" />
                    Delete
                  </DropdownMenuItem>
                )}
              </DropdownMenuContent>
            </DropdownMenu>
          </div>

          {subject.description && (
            <CardDescription className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2">
              {subject.description}
            </CardDescription>
          )}
        </CardHeader>

        <CardContent className="pt-0">
          <div className="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
            <div className="flex items-center space-x-4">
              <span className="capitalize">
                Animation: {subject.animation_type}
              </span>
              <span>
                Order: {subject.display_order}
              </span>
            </div>
            <div className="text-right">
              <div>Created</div>
              <div>{new Date(subject.created_at).toLocaleDateString()}</div>
            </div>
          </div>

          {/* Preview animation button */}
          <div className="mt-3 pt-3 border-t">
            <Button
              variant="ghost"
              size="sm"
              className="w-full text-xs"
              onClick={(e) => {
                e.stopPropagation()
                handleAnimationTrigger()
              }}
              style={{ color: subject.color }}
            >
              Preview {subject.animation_type} Animation
            </Button>
          </div>
        </CardContent>

        {/* Hover overlay */}
        <div className="absolute inset-0 bg-gradient-to-t from-black/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none" />
      </Card>

      {/* Delete confirmation dialog */}
      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Subject</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete "{subject.name}"? This action cannot be undone and will also delete all associated topics and subtopics.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                if (onDelete) {
                  onDelete(subject.id)
                }
                setShowDeleteDialog(false)
              }}
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  )
}===== frontend/src/app/admin/school-levels/[id]/edit/page.tsx =====
'use client'

import { useEffect, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import * as z from 'zod'
import { ArrowLeft, Save, Loader2, RefreshCw } from 'lucide-react'
import Link from 'next/link'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import { Checkbox } from '@/components/ui/checkbox'
import { toast } from 'sonner'
import { schoolLevelApi, type SchoolLevel, type SchoolLevelUpdate } from '@/lib/api'

// Validation schema
const schoolLevelSchema = z.object({
  name: z.string().min(1, 'Name is required').max(100, 'Name must be less than 100 characters'),
  code: z.string().min(1, 'Code is required').max(20, 'Code must be less than 20 characters'),
  display_order: z.number().min(0, 'Display order must be 0 or greater').default(0),
  school_id: z.number().optional(),
  is_active: z.boolean().default(true),
})

type SchoolLevelFormData = z.infer<typeof schoolLevelSchema>

export default function EditSchoolLevelPage() {
  const params = useParams()
  const router = useRouter()
  const schoolLevelId = parseInt(params.id as string)
  
  const [schoolLevel, setSchoolLevel] = useState<SchoolLevel | null>(null)
  const [loading, setLoading] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false)

  const form = useForm<SchoolLevelFormData>({
    resolver: zodResolver(schoolLevelSchema),
    defaultValues: {
      name: '',
      code: '',
      display_order: 0,
      is_active: true,
    },
  })

  // Load school level data
  const loadSchoolLevel = async () => {
    try {
      setLoading(true)
      const response = await schoolLevelApi.getById(schoolLevelId)
      
      if (response.success && response.data) {
        const data = response.data
        setSchoolLevel(data)
        
        // Populate form with existing data
        form.reset({
          name: data.name,
          code: data.code,
          display_order: data.display_order,
          school_id: data.school_id || undefined,
          is_active: data.is_active,
        })
      } else {
        throw new Error(response.message || 'Failed to load school level')
      }
    } catch (error: any) {
      console.error('Failed to load school level:', error)
      toast.error(error.message || 'Failed to load school level')
      router.push('/admin/school-levels')
    } finally {
      setLoading(false)
    }
  }

  // Load data on component mount
  useEffect(() => {
    if (schoolLevelId) {
      loadSchoolLevel()
    }
  }, [schoolLevelId])

  const onSubmit = async (data: SchoolLevelFormData) => {
    setIsSubmitting(true)
    
    try {
      const updateData: SchoolLevelUpdate = {
        name: data.name,
        code: data.code,
        display_order: data.display_order,
        school_id: data.school_id,
        is_active: data.is_active,
      }

      const response = await schoolLevelApi.update(schoolLevelId, updateData)
      
      if (response.success) {
        toast.success('School level updated successfully')
        router.push('/admin/school-levels')
      } else {
        throw new Error(response.message || 'Failed to update school level')
      }
    } catch (error: any) {
      console.error('Failed to update school level:', error)
      toast.error(error.message || 'Failed to update school level')
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleCancel = () => {
    router.push('/admin/school-levels')
  }

  if (loading) {
    return (
      <div className="container mx-auto py-6 px-4">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-center py-12">
              <div className="text-center">
                <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-4 text-gray-400" />
                <p className="text-gray-500">Loading school level...</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (!schoolLevel) {
    return (
      <div className="container mx-auto py-6 px-4">
        <Card>
          <CardContent className="pt-6">
            <div className="text-center py-12">
              <p className="text-gray-500 mb-4">School level not found</p>
              <Link href="/admin/school-levels">
                <Button variant="outline">Back to School Levels</Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-6 px-4">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Link href="/admin/school-levels">
            <Button variant="ghost" size="icon">
              <ArrowLeft className="h-4 w-4" />
            </Button>
          </Link>
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              Edit School Level
            </h1>
            <p className="text-gray-600 dark:text-gray-400">
              Update {schoolLevel.name} details
            </p>
          </div>
        </div>
      </div>

      {/* Form Card */}
      <Card className="max-w-2xl">
        <CardHeader>
          <CardTitle>School Level Information</CardTitle>
          <CardDescription>
            Update the details for this school level
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              {/* Name Field */}
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Name *</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., Primary School, Secondary School"
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      The full name of the school level
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Code Field */}
              <FormField
                control={form.control}
                name="code"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Code *</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., PS, SS, HS"
                        {...field}
                        onChange={(e) => {
                          // Convert to uppercase automatically
                          field.onChange(e.target.value.toUpperCase())
                        }}
                      />
                    </FormControl>
                    <FormDescription>
                      A short code to identify the school level (will be converted to uppercase)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Display Order Field */}
              <FormField
                control={form.control}
                name="display_order"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Display Order</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        min="0"
                        {...field}
                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                      />
                    </FormControl>
                    <FormDescription>
                      Order in which this school level should appear (0 for first)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* School ID Field (Optional) */}
              <FormField
                control={form.control}
                name="school_id"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>School ID (Optional)</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        min="1"
                        placeholder="Enter school ID if applicable"
                        {...field}
                        onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}
                      />
                    </FormControl>
                    <FormDescription>
                      Associate this school level with a specific school (optional)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Active Status */}
              <FormField
                control={form.control}
                name="is_active"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel>Active</FormLabel>
                      <FormDescription>
                        Whether this school level is active and can be used
                      </FormDescription>
                    </div>
                  </FormItem>
                )}
              />

              {/* Action Buttons */}
              <div className="flex items-center justify-end space-x-4 pt-6">
                <Button
                  type="button"
                  variant="outline"
                  onClick={handleCancel}
                  disabled={isSubmitting}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isSubmitting}
                  className="min-w-[120px]"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Updating...
                    </>
                  ) : (
                    <>
                      <Save className="mr-2 h-4 w-4" />
                      Update
                    </>
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>

      {/* System Information */}
      <Card className="max-w-2xl mt-6">
        <CardHeader>
          <CardTitle className="text-lg">System Information</CardTitle>
        </CardHeader>
        <CardContent className="text-sm text-gray-600 dark:text-gray-400">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <span className="font-medium">ID:</span> {schoolLevel.id}
            </div>
            <div>
              <span className="font-medium">Created:</span> {new Date(schoolLevel.created_at).toLocaleDateString()}
            </div>
            <div>
              <span className="font-medium">Last Updated:</span> {new Date(schoolLevel.updated_at).toLocaleDateString()}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Help Section */}
      <Card className="max-w-2xl mt-6">
        <CardHeader>
          <CardTitle className="text-lg">Help</CardTitle>
        </CardHeader>
        <CardContent className="text-sm text-gray-600 dark:text-gray-400">
          <div className="space-y-2">
            <p><strong>Name:</strong> The full descriptive name (e.g., "Primary School", "Secondary School")</p>
            <p><strong>Code:</strong> A short identifier used in forms and reports (e.g., "PS", "SS")</p>
            <p><strong>Display Order:</strong> Controls the order in which school levels appear in lists</p>
            <p><strong>School ID:</strong> Optional field to associate with a specific school</p>
            <p><strong>Active:</strong> Uncheck to hide this school level from normal operations</p>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}===== frontend/src/app/admin/school-levels/[id]/page.tsx =====
'use client'

import { useEffect, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { ArrowLeft, Edit, Trash2, Calendar, Hash, Building, Eye, EyeOff, RefreshCw } from 'lucide-react'
import Link from 'next/link'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { toast } from 'sonner'
import { schoolLevelApi, type SchoolLevel } from '@/lib/api'

export default function SchoolLevelDetailPage() {
  const params = useParams()
  const router = useRouter()
  const schoolLevelId = parseInt(params.id as string)
  
  const [schoolLevel, setSchoolLevel] = useState<SchoolLevel | null>(null)
  const [loading, setLoading] = useState(true)

  // Load school level details
  const loadSchoolLevel = async () => {
    try {
      setLoading(true)
      const response = await schoolLevelApi.getById(schoolLevelId)
      
      if (response.success && response.data) {
        setSchoolLevel(response.data)
      } else {
        throw new Error(response.message || 'Failed to load school level')
      }
    } catch (error: any) {
      console.error('Failed to load school level:', error)
      toast.error(error.message || 'Failed to load school level')
      router.push('/admin/school-levels')
    } finally {
      setLoading(false)
    }
  }

  // Load data on component mount
  useEffect(() => {
    if (schoolLevelId) {
      loadSchoolLevel()
    }
  }, [schoolLevelId])

  // Handle delete
  const handleDelete = async () => {
    if (!schoolLevel) return
    
    if (!confirm(`Are you sure you want to delete "${schoolLevel.name}"?`)) {
      return
    }

    try {
      const response = await schoolLevelApi.delete(schoolLevel.id)
      
      if (response.success) {
        toast.success('School level deleted successfully')
        router.push('/admin/school-levels')
      } else {
        throw new Error(response.message || 'Failed to delete school level')
      }
    } catch (error: any) {
      console.error('Failed to delete school level:', error)
      toast.error(error.message || 'Failed to delete school level')
    }
  }

  if (loading) {
    return (
      <div className="container mx-auto py-6 px-4">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-center py-12">
              <div className="text-center">
                <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-4 text-gray-400" />
                <p className="text-gray-500">Loading school level details...</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (!schoolLevel) {
    return (
      <div className="container mx-auto py-6 px-4">
        <Card>
          <CardContent className="pt-6">
            <div className="text-center py-12">
              <p className="text-gray-500 mb-4">School level not found</p>
              <Link href="/admin/school-levels">
                <Button variant="outline">Back to School Levels</Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-6 px-4">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Link href="/admin/school-levels">
            <Button variant="ghost" size="icon">
              <ArrowLeft className="h-4 w-4" />
            </Button>
          </Link>
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              {schoolLevel.name}
            </h1>
            <p className="text-gray-600 dark:text-gray-400">
              School Level Details
            </p>
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <Button variant="outline" onClick={loadSchoolLevel}>
            <RefreshCw className="mr-2 h-4 w-4" />
            Refresh
          </Button>
          <Link href={`/admin/school-levels/${schoolLevel.id}/edit`}>
            <Button variant="outline">
              <Edit className="mr-2 h-4 w-4" />
              Edit
            </Button>
          </Link>
          <Button
            variant="outline"
            onClick={handleDelete}
            className="text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200"
          >
            <Trash2 className="mr-2 h-4 w-4" />
            Delete
          </Button>
        </div>
      </div>

      {/* Main Content */}
      <div className="grid lg:grid-cols-3 gap-6">
        {/* Basic Information */}
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Building className="h-5 w-5 mr-2 text-blue-600" />
                Basic Information
              </CardTitle>
              <CardDescription>
                Core details about this school level
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Name */}
              <div>
                <label className="text-sm font-medium text-gray-500">Name</label>
                <div className="mt-1 text-lg font-semibold text-gray-900 dark:text-white">
                  {schoolLevel.name}
                </div>
              </div>

              <Separator />

              {/* Code */}
              <div>
                <label className="text-sm font-medium text-gray-500">Code</label>
                <div className="mt-1 flex items-center space-x-2">
                  <Hash className="h-4 w-4 text-gray-400" />
                  <span className="font-mono font-medium text-blue-600 bg-blue-50 px-2 py-1 rounded">
                    {schoolLevel.code}
                  </span>
                </div>
              </div>

              <Separator />

              {/* Display Order */}
              <div>
                <label className="text-sm font-medium text-gray-500">Display Order</label>
                <div className="mt-1 text-base font-medium text-gray-900 dark:text-white">
                  {schoolLevel.display_order}
                </div>
                <p className="text-xs text-gray-500 mt-1">
                  Order in which this school level appears in lists
                </p>
              </div>

              <Separator />

              {/* School ID */}
              <div>
                <label className="text-sm font-medium text-gray-500">School ID</label>
                <div className="mt-1 text-base font-medium text-gray-900 dark:text-white">
                  {schoolLevel.school_id || 'Not specified'}
                </div>
                {schoolLevel.school_id && (
                  <p className="text-xs text-gray-500 mt-1">
                    Associated school identifier
                  </p>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Timestamps */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Calendar className="h-5 w-5 mr-2 text-green-600" />
                Timeline
              </CardTitle>
              <CardDescription>
                Creation and modification history
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium text-gray-500">Created</label>
                  <div className="mt-1 text-base text-gray-900 dark:text-white">
                    {new Date(schoolLevel.created_at).toLocaleDateString()}
                  </div>
                  <div className="text-xs text-gray-500">
                    {new Date(schoolLevel.created_at).toLocaleTimeString()}
                  </div>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Last Updated</label>
                  <div className="mt-1 text-base text-gray-900 dark:text-white">
                    {new Date(schoolLevel.updated_at).toLocaleDateString()}
                  </div>
                  <div className="text-xs text-gray-500">
                    {new Date(schoolLevel.updated_at).toLocaleTimeString()}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Status */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Status</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center space-x-2">
                {schoolLevel.is_active ? (
                  <>
                    <Eye className="h-4 w-4 text-green-600" />
                    <Badge variant="default" className="bg-green-100 text-green-700">
                      Active
                    </Badge>
                  </>
                ) : (
                  <>
                    <EyeOff className="h-4 w-4 text-gray-600" />
                    <Badge variant="secondary">
                      Inactive
                    </Badge>
                  </>
                )}
              </div>
              <p className="text-xs text-gray-500 mt-2">
                {schoolLevel.is_active 
                  ? 'This school level is currently active and visible in the system'
                  : 'This school level is inactive and hidden from normal operations'
                }
              </p>
            </CardContent>
          </Card>

          {/* Quick Actions */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Link href={`/admin/school-levels/${schoolLevel.id}/edit`} className="block">
                <Button variant="outline" className="w-full justify-start">
                  <Edit className="mr-2 h-4 w-4" />
                  Edit School Level
                </Button>
              </Link>
              
              <Button 
                variant="outline" 
                className="w-full justify-start text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200"
                onClick={handleDelete}
              >
                <Trash2 className="mr-2 h-4 w-4" />
                Delete School Level
              </Button>
              
              <Separator />
              
              <Link href="/admin/school-levels" className="block">
                <Button variant="ghost" className="w-full justify-start">
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Back to List
                </Button>
              </Link>
            </CardContent>
          </Card>

          {/* System Information */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">System Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="text-xs text-gray-500 space-y-1">
                <div>ID: {schoolLevel.id}</div>
                <div>Type: School Level</div>
                <div>Created: {new Date(schoolLevel.created_at).toISOString()}</div>
                <div>Modified: {new Date(schoolLevel.updated_at).toISOString()}</div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
} ===== frontend/src/app/admin/school-levels/page.tsx =====
// File: frontend/src/app/admin/school-levels/page.tsx
// Enhanced version with filter controls for active/inactive

'use client'

import { useEffect, useState } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { Plus, Edit, Trash2, Search, RefreshCw, Eye, Filter, Users, GraduationCap } from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Label } from '@/components/ui/label'
import { toast } from 'sonner'
import { schoolLevelApi, type SchoolLevel } from '@/lib/api'
import { DeleteDialog } from '@/components/ui/delete-dialog'

export default function SchoolLevelsPage() {
  const router = useRouter()
  const [schoolLevels, setSchoolLevels] = useState<SchoolLevel[]>([])
  const [loading, setLoading] = useState(true)
  const [searchQuery, setSearchQuery] = useState('')
  const [filteredLevels, setFilteredLevels] = useState<SchoolLevel[]>([])
  const [showInactive, setShowInactive] = useState(true) // Default to showing both
  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'inactive'>('all')
  
  // Delete dialog state
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)
  const [deleteLoading, setDeleteLoading] = useState(false)
  const [itemToDelete, setItemToDelete] = useState<SchoolLevel | null>(null)

  // Load school levels
  const loadSchoolLevels = async () => {
    try {
      setLoading(true)
      // Always fetch all records (including inactive) from the API
      const response = await schoolLevelApi.getAll(true) // true = include inactive
      
      if (response.success && response.data) {
        setSchoolLevels(response.data)
        console.log('Loaded school levels:', response.data) // Debug log
      } else {
        throw new Error(response.message || 'Failed to load school levels')
      }
    } catch (error: any) {
      console.error('Failed to load school levels:', error)
      toast.error(error.message || 'Failed to load school levels')
    } finally {
      setLoading(false)
    }
  }

  // Apply filters (search + status)
  useEffect(() => {
    let filtered = schoolLevels

    // Apply status filter
    if (statusFilter === 'active') {
      filtered = filtered.filter(level => level.is_active)
    } else if (statusFilter === 'inactive') {
      filtered = filtered.filter(level => !level.is_active)
    }

    // Apply search filter
    if (searchQuery.trim()) {
      filtered = filtered.filter(level =>
        level.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        level.code.toLowerCase().includes(searchQuery.toLowerCase())
      )
    }

    setFilteredLevels(filtered)
  }, [searchQuery, schoolLevels, statusFilter])

  // Load data on component mount
  useEffect(() => {
    loadSchoolLevels()
  }, [])

  // Auto-refresh when returning from create page
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        loadSchoolLevels()
      }
    }

    document.addEventListener('visibilitychange', handleVisibilityChange)
    return () => document.removeEventListener('visibilitychange', handleVisibilityChange)
  }, [])

  // Handle delete
  const handleDelete = async (id: number, name: string) => {
    const level = schoolLevels.find(l => l.id === id)
    if (level) {
      setItemToDelete(level)
      setDeleteDialogOpen(true)
    }
  }

  // Handle delete confirmation
  const handleDeleteConfirm = async (hardDelete: boolean) => {
    if (!itemToDelete) return

    try {
      setDeleteLoading(true)
      const response = await schoolLevelApi.delete(itemToDelete.id, hardDelete)
      
      if (response.success) {
        toast.success(`School level ${hardDelete ? 'permanently deleted' : 'deleted'} successfully`)
        loadSchoolLevels() // Reload the list
        setDeleteDialogOpen(false)
        setItemToDelete(null)
      } else {
        throw new Error(response.message || 'Failed to delete school level')
      }
    } catch (error: any) {
      console.error('Failed to delete school level:', error)
      toast.error(error.message || 'Failed to delete school level')
    } finally {
      setDeleteLoading(false)
    }
  }

  // Handle view/edit
  const handleEdit = (id: number) => {
    router.push(`/admin/school-levels/${id}/edit`)
  }

  const handleView = (id: number) => {
    router.push(`/admin/sections/?school_level_id=${id}`)
  }

  const handleManageFormsGrades = (id: number) => {
    router.push(`/admin/forms-grades/?school_level_id=${id}`)
  }

  // Calculate stats
  const activeCount = schoolLevels.filter(l => l.is_active).length
  const inactiveCount = schoolLevels.filter(l => !l.is_active).length

  return (
    <div className="container mx-auto py-6 px-4">
      {/* Header */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 gap-4">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
            School Levels
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            Manage school levels (Primary, Secondary, High School, etc.)
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <Button variant="outline" onClick={loadSchoolLevels} disabled={loading}>
            <RefreshCw className={`mr-2 h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
            Refresh
          </Button>
          <Link href="/admin/school-levels/new">
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Add School Level
            </Button>
          </Link>
        </div>
      </div>

      {/* Search and Filters */}
      <Card className="mb-6">
        <CardContent className="pt-6">
          <div className="flex flex-col space-y-4">
            {/* Search Bar */}
            <div className="flex flex-col sm:flex-row items-start sm:items-center space-y-4 sm:space-y-0 sm:space-x-4">
              <div className="relative flex-1 w-full">
                <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Search school levels by name or code..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>

            {/* Filter Controls */}
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between space-y-4 sm:space-y-0 gap-4">
              <div className="flex items-center space-x-6">
                <div className="flex items-center space-x-2">
                  <Filter className="h-4 w-4 text-gray-500" />
                  <Label className="text-sm font-medium">Status Filter:</Label>
                </div>
                <div className="flex items-center space-x-4">
                  <button
                    onClick={() => setStatusFilter('all')}
                    className={`px-3 py-1 rounded text-sm transition-colors ${
                      statusFilter === 'all'
                        ? 'bg-blue-100 text-blue-700 border border-blue-200'
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    All
                  </button>
                  <button
                    onClick={() => setStatusFilter('active')}
                    className={`px-3 py-1 rounded text-sm transition-colors ${
                      statusFilter === 'active'
                        ? 'bg-green-100 text-green-700 border border-green-200'
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    Active Only
                  </button>
                  <button
                    onClick={() => setStatusFilter('inactive')}
                    className={`px-3 py-1 rounded text-sm transition-colors ${
                      statusFilter === 'inactive'
                        ? 'bg-gray-100 text-gray-700 border border-gray-200'
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    Inactive Only
                  </button>
                </div>
              </div>

              {/* Stats */}
              <div className="flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400">
                <span>Total: {schoolLevels.length}</span>
                <span>•</span>
                <span className="text-green-600">Active: {activeCount}</span>
                <span>•</span>
                <span className="text-gray-500">Inactive: {inactiveCount}</span>
                {filteredLevels.length !== schoolLevels.length && (
                  <>
                    <span>•</span>
                    <span className="text-blue-600">Showing: {filteredLevels.length}</span>
                  </>
                )}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Content */}
      {loading ? (
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-center py-12">
              <div className="text-center">
                <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-4 text-gray-400" />
                <p className="text-gray-500">Loading school levels...</p>
              </div>
            </div>
          </CardContent>
        </Card>
      ) : filteredLevels.length === 0 ? (
        <Card>
          <CardContent className="pt-6">
            <div className="text-center py-12">
              {searchQuery || statusFilter !== 'all' ? (
                <div>
                  <p className="text-gray-500 mb-4">
                    No school levels found matching your filters
                  </p>
                  <div className="space-x-2">
                    <Button variant="outline" onClick={() => setSearchQuery('')}>
                      Clear Search
                    </Button>
                    <Button variant="outline" onClick={() => setStatusFilter('all')}>
                      Show All
                    </Button>
                  </div>
                </div>
              ) : (
                <div>
                  <p className="text-gray-500 mb-4">
                    No school levels found. Create your first school level to get started.
                  </p>
                  <Link href="/admin/school-levels/new">
                    <Button>
                      <Plus className="mr-2 h-4 w-4" />
                      Add School Level
                    </Button>
                  </Link>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      ) : (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {filteredLevels.map((level) => (
            <Card 
              key={level.id} 
              className={`hover:shadow-lg transition-all duration-200 border-l-4 ${
                level.is_active 
                  ? 'border-l-blue-500' 
                  : 'border-l-gray-400 opacity-75'
              }`}
            >
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <CardTitle className={`text-lg font-semibold ${
                    !level.is_active ? 'text-gray-600' : ''
                  }`}>
                    {level.name}
                  </CardTitle>
                  <Badge variant={level.is_active ? 'default' : 'secondary'}>
                    {level.is_active ? 'Active' : 'Inactive'}
                  </Badge>
                </div>
                <CardDescription className="flex items-center justify-between">
                  <span>Code: <span className={`font-mono font-medium ${
                    level.is_active ? 'text-blue-600' : 'text-gray-500'
                  }`}>{level.code}</span></span>
                  <span className="text-xs text-gray-500">ID: {level.id}</span>
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {/* Details */}
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-500">Display Order:</span>
                      <div className="font-medium">{level.display_order}</div>
                    </div>
                    <div>
                      <span className="text-gray-500">School ID:</span>
                      <div className="font-medium">{level.school_id}</div>
                    </div>
                  </div>
                  
                  {/* Timestamps */}
                  <div className="pt-2 border-t border-gray-100">
                    <div className="grid grid-cols-1 gap-1 text-xs text-gray-500">
                      <div>Created: {new Date(level.created_at).toLocaleDateString()}</div>
                      <div>Updated: {new Date(level.updated_at).toLocaleDateString()}</div>
                    </div>
                  </div>

                  {/* Actions */}
                  <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                    <Button variant="outline" size="sm" onClick={() => handleManageFormsGrades(level.id)}>
                      <GraduationCap className="h-4 w-4 mr-1" />
                      Manage {level.grade_type === 'form' ? 'Forms' : 'Grades'}
                    </Button>
                    <div className="flex items-center space-x-2">
                      <Button variant="outline" size="sm" onClick={() => handleEdit(level.id)}>
                        <Edit className="h-4 w-4 mr-1" />
                        Edit
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDelete(level.id, level.name)}
                        className="text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200"
                      >
                        <Trash2 className="h-4 w-4 mr-1" />
                        Delete
                      </Button>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* Summary Footer */}
      {!loading && filteredLevels.length > 0 && (
        <Card className="mt-6">
          <CardContent className="pt-6">
            <div className="flex flex-col sm:flex-row items-center justify-between text-sm text-gray-600 dark:text-gray-400 gap-4">
              <div className="flex items-center space-x-4">
                <span>
                  Showing {filteredLevels.length} of {schoolLevels.length} school levels
                </span>
                {(searchQuery || statusFilter !== 'all') && (
                  <Badge variant="outline">
                    {searchQuery && `Search: "${searchQuery}"`}
                    {searchQuery && statusFilter !== 'all' && ' • '}
                    {statusFilter !== 'all' && `Status: ${statusFilter}`}
                  </Badge>
                )}
              </div>
              <div className="flex items-center space-x-4">
                <span className="text-green-600">
                  {activeCount} active
                </span>
                <span className="text-gray-400">•</span>
                <span className="text-gray-500">
                  {inactiveCount} inactive
                </span>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Delete Dialog */}
      {itemToDelete && (
        <DeleteDialog
          open={deleteDialogOpen}
          onOpenChange={setDeleteDialogOpen}
          title="Delete School Level"
          itemName={itemToDelete.name}
          itemType="school level"
          isActive={itemToDelete.is_active}
          onConfirm={handleDeleteConfirm}
          loading={deleteLoading}
          showSoftDeleteOption={true}
        />
      )}
    </div>
  )
}===== frontend/src/app/admin/school-levels/new/page.tsx =====
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import * as z from 'zod'
import { ArrowLeft, Save, Loader2 } from 'lucide-react'
import Link from 'next/link'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import { Checkbox } from '@/components/ui/checkbox'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { toast } from 'sonner'
import { schoolLevelApi, type SchoolLevelCreate } from '@/lib/api'

// Validation schema
const schoolLevelSchema = z.object({
  name: z.string().min(1, 'Name is required').max(100, 'Name must be less than 100 characters'),
  code: z.string().min(1, 'Code is required').max(20, 'Code must be less than 20 characters'),
  display_order: z.number().min(0, 'Display order must be 0 or greater').default(0),
  school_id: z.number().min(1, 'School ID is required').default(1),
  is_active: z.boolean().default(true),
  grade_type: z.enum(['form', 'grade']).default('grade'),
})

type SchoolLevelFormData = z.infer<typeof schoolLevelSchema>

export default function CreateSchoolLevelPage() {
  const router = useRouter()
  const [isSubmitting, setIsSubmitting] = useState(false)

  const form = useForm<SchoolLevelFormData>({
    resolver: zodResolver(schoolLevelSchema),
    defaultValues: {
      name: '',
      code: '',
      display_order: 0,
      school_id: 1, // Default school ID
      is_active: true,
      grade_type: 'grade',
    },
  })

  const onSubmit = async (data: SchoolLevelFormData) => {
    if (isSubmitting) return
    
    setIsSubmitting(true)
    
    try {
      console.log('Submitting school level data:', data)

      const schoolLevelData: SchoolLevelCreate = {
        name: data.name.trim(),
        code: data.code.trim().toUpperCase(),
        display_order: data.display_order,
        school_id: data.school_id,
        is_active: data.is_active,
        grade_type: data.grade_type,
      }

      console.log('Processed data for API:', schoolLevelData)

      const response = await schoolLevelApi.create(schoolLevelData)
      
      console.log('API response:', response)

      if (response.success) {
        toast.success('School level created successfully')
        router.push('/admin/school-levels')
        router.refresh() // Refresh to update the list
      } else {
        throw new Error(response.message || 'Failed to create school level')
      }
    } catch (error: any) {
      console.error('Failed to create school level:', error)
      
      // Handle specific error messages
      let errorMessage = 'Failed to create school level'
      
      if (error.message?.includes('already exists')) {
        errorMessage = 'A school level with this code already exists'
      } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
        errorMessage = 'Network error. Please check if the backend server is running.'
      } else if (error.message) {
        errorMessage = error.message
      }
      
      toast.error(errorMessage)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleCancel = () => {
    router.push('/admin/school-levels')
  }

  return (
    <div className="container mx-auto py-6 px-4">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Link href="/admin/school-levels">
            <Button variant="ghost" size="icon">
              <ArrowLeft className="h-4 w-4" />
            </Button>
          </Link>
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              Create School Level
            </h1>
            <p className="text-gray-600 dark:text-gray-400">
              Add a new school level (Primary, Secondary, High School, etc.)
            </p>
          </div>
        </div>
      </div>

      {/* Form Card */}
      <Card className="max-w-2xl">
        <CardHeader>
          <CardTitle>School Level Information</CardTitle>
          <CardDescription>
            Fill in the details for the new school level. The code will be automatically converted to uppercase.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              {/* Name Field */}
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Name *</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., Primary School, Secondary School"
                        {...field}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <FormDescription>
                      The full name of the school level
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Code Field */}
              <FormField
                control={form.control}
                name="code"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Code *</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., PRI, SEC, HIGH"
                        {...field}
                        onChange={(e) => field.onChange(e.target.value.toUpperCase())}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <FormDescription>
                      A unique short code for the school level (automatically converted to uppercase)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Grade Type Field */}
              <FormField
                control={form.control}
                name="grade_type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Grade Type *</FormLabel>
                    <Select 
                      onValueChange={field.onChange} 
                      defaultValue={field.value}
                      disabled={isSubmitting}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select grade type" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="grade">Grade (Grade 1, Grade 2, etc.)</SelectItem>
                        <SelectItem value="form">Form (Form 1, Form 2, etc.)</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormDescription>
                      Choose how grades are numbered in this school level
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Display Order Field */}
              <FormField
                control={form.control}
                name="display_order"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Display Order</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        min="0"
                        placeholder="0"
                        {...field}
                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <FormDescription>
                      Controls the order in which school levels are displayed (0 = first)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* School ID Field */}
              <FormField
                control={form.control}
                name="school_id"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>School ID</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        min="1"
                        placeholder="1"
                        {...field}
                        onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <FormDescription>
                      The ID of the school this level belongs to (default: 1)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Active Status Field */}
              <FormField
                control={form.control}
                name="is_active"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel>
                        Active
                      </FormLabel>
                      <FormDescription>
                        Whether this school level is currently active and available for use
                      </FormDescription>
                    </div>
                  </FormItem>
                )}
              />

              {/* Form Actions */}
              <div className="flex items-center justify-end space-x-4 pt-6">
                <Button
                  type="button"
                  variant="outline"
                  onClick={handleCancel}
                  disabled={isSubmitting}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isSubmitting}
                  className="min-w-[120px]"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Creating...
                    </>
                  ) : (
                    <>
                      <Save className="mr-2 h-4 w-4" />
                      Create School Level
                    </>
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  )
}===== frontend/src/app/admin/terms/[form_grade_id]/page.tsx =====
'use client'

import { useState, useEffect } from 'react'
import { useParams } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  Plus, 
  Edit, 
  Trash2, 
  Calendar,
  GraduationCap,
  ArrowRight,
  BookOpen,
  Users,
  Clock,
  Target
} from 'lucide-react'
import Link from 'next/link'
import { termApi } from '@/lib/api'

interface FormGrade {
  id: number
  name: string
  code: string
  school_level: {
    id: number
    name: string
  }
}

interface Term {
  id: number
  name: string
  code: string
  start_date?: string
  end_date?: string
  display_order: number
  form_grade_id: number
  is_active: boolean
  created_at: string
  updated_at: string
  form_grade?: FormGrade
  subjects_count?: number // We'll add this from API if available
}

const TermsManagePage = () => {
  const params = useParams()
  const formGradeId = parseInt(params.form_grade_id as string)
  
  const [terms, setTerms] = useState<Term[]>([])
  const [formGrade, setFormGrade] = useState<FormGrade | null>(null)
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState('active')

  useEffect(() => {
    fetchTerms()
  }, [formGradeId])

  const fetchTerms = async () => {
    try {
      const response = await termApi.getByFormGrade(formGradeId)
      setTerms(response.data || [])
      
      // Set form grade info from the first term
      if (response.data && response.data.length > 0) {
        setFormGrade(response.data[0].form_grade)
      }
    } catch (error) {
      console.error('Error fetching terms:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleDeleteTerm = async (id: number) => {
    if (confirm('Are you sure you want to delete this term?')) {
      try {
        await termApi.delete(id)
        fetchTerms()
      } catch (error) {
        console.error('Error deleting term:', error)
      }
    }
  }

  const getFilteredTerms = () => {
    if (activeTab === 'active') {
      return terms.filter(term => term.is_active)
    } else if (activeTab === 'inactive') {
      return terms.filter(term => !term.is_active)
    }
    return terms
  }

  const TermCard = ({ term }: { term: Term }) => (
    <Card className="group hover:shadow-lg transition-all duration-300 hover:border-blue-300">
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 rounded-lg bg-blue-500 flex items-center justify-center text-white text-sm font-bold">
              {term.code}
            </div>
            <div>
              <CardTitle className="text-lg">{term.name}</CardTitle>
              <CardDescription className="text-sm">
                Code: {term.code}
              </CardDescription>
            </div>
          </div>
          <Badge variant={term.is_active ? "default" : "secondary"}>
            {term.is_active ? 'Active' : 'Inactive'}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {/* Term Details */}
          <div className="grid grid-cols-2 gap-3 text-sm">
            <div>
              <span className="text-gray-500">Start Date:</span>
              <div className="font-medium">
                {term.start_date ? new Date(term.start_date).toLocaleDateString() : 'Not set'}
              </div>
            </div>
            <div>
              <span className="text-gray-500">End Date:</span>
              <div className="font-medium">
                {term.end_date ? new Date(term.end_date).toLocaleDateString() : 'Not set'}
              </div>
            </div>
          </div>

          {/* Quick Stats */}
          <div className="flex items-center space-x-4 text-sm text-gray-500">
            <div className="flex items-center space-x-1">
              <BookOpen className="w-4 h-4" />
              <span>{term.subjects_count || 0} subjects</span>
            </div>
            <div className="flex items-center space-x-1">
              <Clock className="w-4 h-4" />
              <span>Order: {term.display_order}</span>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex items-center justify-between pt-3 border-t">
            <div className="flex space-x-2">
              {/* Main CTA - Create Subjects */}
              <Link href={`/admin/subjects/new?term_id=${term.id}`}>
                <Button size="sm" className="bg-green-600 hover:bg-green-700">
                  <Plus className="w-4 h-4 mr-1" />
                  Add Subjects
                </Button>
              </Link>
              
              {/* View Subjects */}
              <Link href={`/admin/subjects?term_id=${term.id}`}>
                <Button variant="outline" size="sm">
                  <BookOpen className="w-4 h-4 mr-1" />
                  View Subjects
                </Button>
              </Link>
            </div>

            <div className="flex space-x-1">
              {/* Edit Term */}
              <Link href={`/admin/terms/${term.id}/edit`}>
                <Button variant="outline" size="sm">
                  <Edit className="w-4 h-4" />
                </Button>
              </Link>
              
              {/* Delete Term */}
              <Button 
                variant="destructive" 
                size="sm"
                onClick={() => handleDeleteTerm(term.id)}
              >
                <Trash2 className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )

  // Clickable Term Row (Alternative compact view)
  const TermRow = ({ term }: { term: Term }) => (
    <div className="group border rounded-lg p-4 hover:bg-blue-50 hover:border-blue-300 transition-all duration-200 cursor-pointer">
      <Link href={`/admin/subjects/new?term_id=${term.id}`}>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="w-10 h-10 rounded-lg bg-blue-500 flex items-center justify-center text-white text-sm font-bold">
              {term.code}
            </div>
            <div>
              <h3 className="font-semibold text-gray-900 group-hover:text-blue-700">
                {term.name}
              </h3>
              <p className="text-sm text-gray-500">
                {term.start_date && term.end_date 
                  ? `${new Date(term.start_date).toLocaleDateString()} - ${new Date(term.end_date).toLocaleDateString()}`
                  : 'Dates not set'
                }
              </p>
            </div>
          </div>
          
          <div className="flex items-center space-x-3">
            <div className="text-sm text-gray-500">
              {term.subjects_count || 0} subjects
            </div>
            <Badge variant={term.is_active ? "default" : "secondary"}>
              {term.is_active ? 'Active' : 'Inactive'}
            </Badge>
            <ArrowRight className="w-5 h-5 text-gray-400 group-hover:text-blue-600 transition-colors" />
          </div>
        </div>
      </Link>
    </div>
  )

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    )
  }

  const filteredTerms = getFilteredTerms()

  return (
    <div className="max-w-6xl mx-auto space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Manage Terms</h1>
          <div className="flex items-center space-x-2 text-gray-600">
            <span>for</span>
            <Badge variant="outline" className="text-sm">
              {formGrade?.name} - {formGrade?.school_level?.name}
            </Badge>
          </div>
        </div>
        <Link href={`/admin/terms/new?form_grade_id=${formGradeId}`}>
          <Button className="bg-blue-600 hover:bg-blue-700">
            <Plus className="w-4 h-4 mr-2" />
            Create Terms
          </Button>
        </Link>
      </div>

      {/* Quick Info */}
      <Alert className="border-blue-200 bg-blue-50">
        <Target className="h-4 w-4 text-blue-600" />
        <AlertDescription className="text-blue-800">
          <strong>Next Step:</strong> Click on any term below to start adding subjects to it, or use the "Add Subjects" button.
        </AlertDescription>
      </Alert>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="pt-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">{terms.length}</div>
              <div className="text-sm text-gray-600">Total Terms</div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">
                {terms.filter(t => t.is_active).length}
              </div>
              <div className="text-sm text-gray-600">Active</div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">
                {terms.filter(t => !t.is_active).length}
              </div>
              <div className="text-sm text-gray-600">Inactive</div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">
                {terms.reduce((sum, t) => sum + (t.subjects_count || 0), 0)}
              </div>
              <div className="text-sm text-gray-600">Total Subjects</div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="all">All Terms ({terms.length})</TabsTrigger>
          <TabsTrigger value="active">Active ({terms.filter(t => t.is_active).length})</TabsTrigger>
          <TabsTrigger value="inactive">Inactive ({terms.filter(t => !t.is_active).length})</TabsTrigger>
        </TabsList>

        <TabsContent value={activeTab} className="space-y-4">
          {filteredTerms.length === 0 ? (
            <Card>
              <CardContent className="pt-6">
                <div className="text-center py-12">
                  <Calendar className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No Terms Found</h3>
                  <p className="text-gray-600 mb-4">
                    Create your first term to start building the curriculum
                  </p>
                  <Link href={`/admin/terms/new?form_grade_id=${formGradeId}`}>
                    <Button>
                      <Plus className="w-4 h-4 mr-2" />
                      Create First Term
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-4">
              {/* Compact clickable list - this matches your current design */}
              <div className="space-y-3">
                {filteredTerms.map((term) => (
                  <TermRow key={term.id} term={term} />
                ))}
              </div>

              {/* Alternative: Card view (uncomment if you prefer cards) */}
              {/* 
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredTerms.map((term) => (
                  <TermCard key={term.id} term={term} />
                ))}
              </div>
              */}
            </div>
          )}
        </TabsContent>
      </Tabs>

      {/* Quick Actions Footer */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">Quick Actions</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Link href={`/admin/terms/new?form_grade_id=${formGradeId}`}>
              <Button variant="outline" className="w-full justify-start">
                <Plus className="w-4 h-4 mr-2" />
                Add New Term
              </Button>
            </Link>
            <Link href={`/admin/subjects?form_grade_id=${formGradeId}`}>
              <Button variant="outline" className="w-full justify-start">
                <BookOpen className="w-4 h-4 mr-2" />
                View All Subjects
              </Button>
            </Link>
            <Link href="/admin/forms-grades">
              <Button variant="outline" className="w-full justify-start">
                <GraduationCap className="w-4 h-4 mr-2" />
                Back to Forms/Grades
              </Button>
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

export default TermsManagePage ===== frontend/src/app/admin/terms/page.tsx =====
'use client'

import { useState, useEffect } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  Plus, 
  Edit, 
  Trash2, 
  Calendar,
  GraduationCap,
  ArrowRight,
  BookOpen,
  Users,
  Clock,
  Target,
  ArrowLeft,
  Loader2,
  RefreshCw,
  AlertCircle,
  AlertTriangle,
  Eye,
  EyeOff
} from 'lucide-react'
import Link from 'next/link'
import { termApi, formGradeApi, type Term, type FormGrade } from '@/lib/api'
import { toast } from 'sonner'
import { safeRoutes, isValidId } from '@/lib/safe-links'
import { EnhancedDeleteDialog } from '@/components/ui/enhanced-delete-dialog'

// Helper function to validate form grade ID
const validateFormGradeId = (param: string | null): { id: number | null; isValid: boolean; error?: string } => {
  if (!param) {
    return { id: null, isValid: false, error: 'No form/grade ID provided in URL' }
  }
  
  const parsed = parseInt(param, 10)
  
  if (isNaN(parsed)) {
    return { id: null, isValid: false, error: `Invalid form/grade ID format: "${param}". Must be a number.` }
  }
  
  if (parsed <= 0) {
    return { id: null, isValid: false, error: `Invalid form/grade ID: ${parsed}. Must be greater than 0.` }
  }
  
  return { id: parsed, isValid: true }
}

const TermsManagePage = () => {
  const router = useRouter()
  const searchParams = useSearchParams()
  const formGradeIdParam = searchParams.get('form_grade_id')
  
  // Validate form_grade_id parameter
  const validation = validateFormGradeId(formGradeIdParam)
  const formGradeId = validation.id
  const isValidFormGradeId = validation.isValid
  
  const [terms, setTerms] = useState<Term[]>([])
  const [formGrade, setFormGrade] = useState<FormGrade | null>(null)
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState('active')
  const [error, setError] = useState<string | null>(null)

  // Enhanced delete dialog state
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)
  const [termToDelete, setTermToDelete] = useState<Term | null>(null)
  const [deleteLoading, setDeleteLoading] = useState(false)

  // Debug logging
  console.log('Terms page - URL params:', {
    formGradeIdParam,
    formGradeId,
    isValidFormGradeId,
    validationError: validation.error
  })

  useEffect(() => {
    if (isValidFormGradeId && formGradeId) {
      fetchTerms()
    } else {
      setLoading(false)
      setError(validation.error || 'Invalid form/grade ID')
    }
  }, [formGradeIdParam, isValidFormGradeId, formGradeId])

  const fetchTerms = async () => {
    if (!isValidFormGradeId || !formGradeId) {
      setError('Invalid form/grade ID')
      return
    }
    
    try {
      setLoading(true)
      setError(null)
      
      console.log('Fetching terms for form/grade ID:', formGradeId)
      
      const response = await termApi.getByFormGrade(formGradeId, true) // Include inactive terms
      
      console.log('Terms API response:', response)
      
      if (response.success && response.data) {
        setTerms(response.data)
        
        // Set form grade info from the first term
        if (response.data.length > 0 && response.data[0].form_grade) {
          setFormGrade(response.data[0].form_grade)
        }
      } else {
        throw new Error(response.message || 'Failed to fetch terms')
      }
    } catch (error: any) {
      console.error('Error fetching terms:', error)
      setError(error.message || 'Failed to load terms')
      toast.error('Failed to load terms')
    } finally {
      setLoading(false)
    }
  }

  const handleDeleteTerm = async (permanent: boolean = false) => {
    if (!termToDelete) return

    try {
      setDeleteLoading(true)
      
      console.log(`${permanent ? 'Hard' : 'Soft'} deleting term:`, termToDelete.id)
      
      const response = await termApi.delete(termToDelete.id, !permanent) // Note: API expects softDelete boolean
      
      if (response.success) {
        const deleteType = permanent ? 'permanently deleted' : 'deactivated'
        toast.success(`Term "${termToDelete.name}" ${deleteType} successfully`)
        
        // Close dialog and reset state
        setDeleteDialogOpen(false)
        setTermToDelete(null)
        
        // Refresh the list to show updated status
        fetchTerms()
      } else {
        throw new Error(response.message || `Failed to ${permanent ? 'delete' : 'deactivate'} term`)
      }
    } catch (error: any) {
      console.error('Error deleting term:', error)
      const action = permanent ? 'delete' : 'deactivate'
      toast.error(error.message || `Failed to ${action} term`)
    } finally {
      setDeleteLoading(false)
    }
  }

  const openDeleteDialog = (term: Term) => {
    setTermToDelete(term)
    setDeleteDialogOpen(true)
  }

  const closeDeleteDialog = () => {
    if (!deleteLoading) {
      setDeleteDialogOpen(false)
      setTermToDelete(null)
    }
  }

  // Safe navigation helpers
  const navigateToSubjects = (term: Term) => {
    if (!isValidId(term.id)) {
      console.error('Invalid term ID for subjects navigation:', term.id)
      toast.error('Invalid term ID')
      return
    }
    
    try {
      const url = safeRoutes.subjectsForTerm(term.id)
      console.log('Navigating to subjects with URL:', url)
      router.push(url)
    } catch (error: any) {
      console.error('Navigation error:', error)
      toast.error(error.message)
    }
  }

  const navigateToEditTerm = (term: Term) => {
    if (!isValidId(term.id)) {
      console.error('Invalid term ID for edit navigation:', term.id)
      toast.error('Invalid term ID')
      return
    }
    
    try {
      const url = safeRoutes.editTerm(term.id)
      router.push(url)
    } catch (error: any) {
      console.error('Navigation error:', error)
      toast.error(error.message)
    }
  }

  const handleToggleTermStatus = async (id: number, currentStatus: boolean) => {
    if (!isValidId(id)) {
      toast.error('Invalid term ID')
      return
    }
    
    try {
      const newStatus = !currentStatus
      const action = newStatus ? 'activate' : 'deactivate'
      
      console.log(`${action.charAt(0).toUpperCase() + action.slice(1)}ing term:`, id)
      
      const response = await termApi.update(id, { is_active: newStatus })
      
      if (response.success) {
        toast.success(`Term ${action}d successfully`)
        fetchTerms() // Refresh the list
      } else {
        throw new Error(response.message || `Failed to ${action} term`)
      }
    } catch (error: any) {
      console.error('Error updating term status:', error)
      const action = !currentStatus ? 'activate' : 'deactivate'
      toast.error(error.message || `Failed to ${action} term`)
    }
  }

  // Filter terms based on active tab
  const filteredTerms = terms.filter(term => {
    if (activeTab === 'active') return term.is_active
    if (activeTab === 'inactive') return !term.is_active
    return true // 'all' tab
  })

  if (loading) {
    return (
      <div className="container mx-auto py-6 px-4">
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
            <p className="text-gray-600">Loading terms...</p>
          </div>
        </div>
      </div>
    )
  }

  if (error || !isValidFormGradeId) {
    return (
      <div className="container mx-auto py-6 px-4">
        <Alert className="max-w-2xl mx-auto">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            {error || validation.error || 'Invalid form/grade ID provided.'}
          </AlertDescription>
        </Alert>
        <div className="text-center mt-6 space-x-4">
          <Link href="/admin/forms-grades">
            <Button variant="outline">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Forms/Grades
            </Button>
          </Link>
          <Button variant="outline" onClick={() => window.location.reload()}>
            <RefreshCw className="mr-2 h-4 w-4" />
            Reload Page
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-6 px-4">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Link href="/admin/forms-grades">
            <Button variant="ghost" size="icon">
              <ArrowLeft className="h-4 w-4" />
            </Button>
          </Link>
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              Terms for {formGrade?.name || `Form/Grade ${formGradeId}`}
            </h1>
            <p className="text-gray-600 dark:text-gray-400">
              Manage academic terms and their subjects
              {formGrade?.school_level && ` • ${formGrade.school_level.name}`}
            </p>
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          <Button variant="outline" size="icon" onClick={fetchTerms}>
            <RefreshCw className="h-4 w-4" />
          </Button>
          {/* Safe link generation for new term */}
          {formGradeId && isValidId(formGradeId) ? (
            <Link href={safeRoutes.newTermForFormGrade(formGradeId)}>
              <Button>
                <Plus className="mr-2 h-4 w-4" />
                Add Term
              </Button>
            </Link>
          ) : (
            <Button disabled>
              <Plus className="mr-2 h-4 w-4" />
              Add Term
            </Button>
          )}
        </div>
      </div>

      {/* Terms List */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span className="flex items-center">
              <Calendar className="mr-2 h-5 w-5" />
              Academic Terms
            </span>
            <Badge variant="outline">
              {terms.length} total
            </Badge>
          </CardTitle>
          <CardDescription>
            View and manage terms for this form/grade
          </CardDescription>
        </CardHeader>

        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-3 mb-6">
              <TabsTrigger value="active">Active ({filteredTerms.filter(t => t.is_active).length})</TabsTrigger>
              <TabsTrigger value="inactive">Inactive ({filteredTerms.filter(t => !t.is_active).length})</TabsTrigger>
              <TabsTrigger value="all">All ({terms.length})</TabsTrigger>
            </TabsList>

            <TabsContent value={activeTab}>
              {filteredTerms.length === 0 ? (
                <div className="text-center py-8">
                  <Calendar className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                    No {activeTab === 'all' ? '' : activeTab} terms found
                  </h3>
                  <p className="text-gray-600 dark:text-gray-400 mb-4">
                    {activeTab === 'active' 
                      ? 'There are no active terms for this form/grade yet.'
                      : activeTab === 'inactive'
                      ? 'There are no inactive terms for this form/grade.'
                      : 'This form/grade has no terms yet.'}
                  </p>
                  {formGradeId && isValidId(formGradeId) ? (
                    <Link href={safeRoutes.newTermForFormGrade(formGradeId)}>
                      <Button>
                        <Plus className="mr-2 h-4 w-4" />
                        Create First Term
                      </Button>
                    </Link>
                  ) : (
                    <Button disabled>
                      <Plus className="mr-2 h-4 w-4" />
                      Create First Term
                    </Button>
                  )}
                </div>
              ) : (
                <div className="space-y-4">
                  {filteredTerms
                    .sort((a, b) => a.display_order - b.display_order)
                    .map((term) => (
                    <Card key={term.id} className="border hover:border-blue-200 transition-colors">
                      <CardContent className="p-6">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-4">
                            <div className="bg-blue-100 dark:bg-blue-900 p-3 rounded-lg">
                              <Calendar className="h-6 w-6 text-blue-600 dark:text-blue-400" />
                            </div>
                            
                            <div>
                              <div className="flex items-center space-x-2 mb-1">
                                <h3 className="font-semibold text-gray-900 dark:text-white">
                                  {term.name}
                                </h3>
                                <Badge variant="secondary" className="text-xs">
                                  {term.code}
                                </Badge>
                                <Badge 
                                  variant={term.is_active ? "default" : "secondary"}
                                  className={term.is_active ? "bg-green-100 text-green-800" : ""}
                                >
                                  {term.is_active ? 'Active' : 'Inactive'}
                                </Badge>
                              </div>
                              
                              <div className="flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400">
                                <span className="flex items-center">
                                  <Target className="mr-1 h-4 w-4" />
                                  Order: {term.display_order}
                                </span>
                                {term.start_date && (
                                  <span className="flex items-center">
                                    <Clock className="mr-1 h-4 w-4" />
                                    {new Date(term.start_date).toLocaleDateString()}
                                  </span>
                                )}
                                {term.subjects_count !== undefined && (
                                  <span className="flex items-center">
                                    <BookOpen className="mr-1 h-4 w-4" />
                                    {term.subjects_count} subjects
                                  </span>
                                )}
                              </div>
                            </div>
                          </div>

                          <div className="flex items-center space-x-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => navigateToSubjects(term)}
                              disabled={!isValidId(term.id)}
                            >
                              <BookOpen className="mr-2 h-4 w-4" />
                              Subjects
                            </Button>
                            
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => navigateToEditTerm(term)}
                              disabled={!isValidId(term.id)}
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleToggleTermStatus(term.id, term.is_active)}
                              disabled={!isValidId(term.id)}
                              className={term.is_active ? "text-orange-600 hover:text-orange-700" : "text-green-600 hover:text-green-700"}
                            >
                              {term.is_active ? (
                                <>
                                  <EyeOff className="mr-1 h-4 w-4" />
                                  Deactivate
                                </>
                              ) : (
                                <>
                                  <Eye className="mr-1 h-4 w-4" />
                                  Activate
                                </>
                              )}
                            </Button>
                            
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => openDeleteDialog(term)}
                              className="text-red-600 hover:text-red-700"
                              disabled={!isValidId(term.id)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  )
}

export default TermsManagePage===== frontend/src/app/admin/terms/new/page.tsx =====
'use client'

import { useState, useEffect } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import * as z from 'zod'
import { ArrowLeft, Save, Loader2, AlertCircle } from 'lucide-react'
import Link from 'next/link'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import { Checkbox } from '@/components/ui/checkbox'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { toast } from 'sonner'
import { termApi, formGradeApi, type TermCreate, type FormGrade } from '@/lib/api'
import { isValidId, toValidId, safeRoutes } from '@/lib/safe-links'

// Validation schema
const termSchema = z.object({
  name: z.string().min(1, 'Name is required').max(100, 'Name must be less than 100 characters'),
  code: z.string().min(1, 'Code is required').max(20, 'Code must be less than 20 characters'),
  start_date: z.string().optional(),
  end_date: z.string().optional(),
  display_order: z.number().min(0, 'Display order must be 0 or greater').default(0),
  form_grade_id: z.number().min(1, 'Form/Grade ID is required'),
  is_active: z.boolean().default(true),
})

type TermFormData = z.infer<typeof termSchema>

export default function CreateTermPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const formGradeIdParam = searchParams.get('form_grade_id')
  
  // Validate form_grade_id parameter
  const formGradeId = toValidId(formGradeIdParam)
  const isValidFormGradeId = isValidId(formGradeId)
  
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [formGrade, setFormGrade] = useState<FormGrade | null>(null)
  const [loadingFormGrade, setLoadingFormGrade] = useState(false)
  const [error, setError] = useState<string | null>(null)

  console.log('New Term Page - URL validation:', {
    formGradeIdParam,
    formGradeId,
    isValidFormGradeId
  })

  const form = useForm<TermFormData>({
    resolver: zodResolver(termSchema),
    defaultValues: {
      name: '',
      code: '',
      start_date: '',
      end_date: '',
      display_order: 0,
      form_grade_id: formGradeId || 1,
      is_active: true,
    },
  })

  // Load form/grade information
  useEffect(() => {
    if (isValidFormGradeId && formGradeId) {
      loadFormGrade()
    } else {
      setError(
        !formGradeIdParam 
          ? 'No form/grade ID provided in URL'
          : `Invalid form/grade ID: "${formGradeIdParam}". Must be a positive integer.`
      )
    }
  }, [formGradeIdParam, isValidFormGradeId, formGradeId])

  const loadFormGrade = async () => {
    if (!formGradeId) return
    
    try {
      setLoadingFormGrade(true)
      setError(null)
      
      const response = await formGradeApi.getById(formGradeId)
      
      if (response.success && response.data) {
        setFormGrade(response.data)
        // Update form with the correct form_grade_id
        form.setValue('form_grade_id', formGradeId)
      } else {
        throw new Error(response.message || 'Failed to load form/grade information')
      }
    } catch (error: any) {
      console.error('Failed to load form/grade:', error)
      setError(`Failed to load form/grade information: ${error.message}`)
    } finally {
      setLoadingFormGrade(false)
    }
  }

  const onSubmit = async (data: TermFormData) => {
    if (isSubmitting) return
    
    setIsSubmitting(true)
    
    try {
      console.log('Submitting term data:', data)

      const termData: TermCreate = {
        name: data.name.trim(),
        code: data.code.trim().toUpperCase(),
        start_date: data.start_date || undefined,
        end_date: data.end_date || undefined,
        display_order: data.display_order,
        form_grade_id: data.form_grade_id,
        is_active: data.is_active,
      }

      console.log('Processed data for API:', termData)

      const response = await termApi.create(termData)
      
      console.log('API response:', response)

      if (response.success) {
        toast.success('Term created successfully')
        
        // Navigate back to terms list with safe URL
        const backUrl = safeRoutes.termsForFormGrade(formGradeId)
        router.push(backUrl)
        router.refresh()
      } else {
        throw new Error(response.message || 'Failed to create term')
      }
    } catch (error: any) {
      console.error('Failed to create term:', error)
      
      let errorMessage = 'Failed to create term'
      
      if (error.message?.includes('already exists')) {
        errorMessage = 'A term with this code already exists'
      } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
        errorMessage = 'Network error. Please check if the backend server is running.'
      } else if (error.message) {
        errorMessage = error.message
      }
      
      toast.error(errorMessage)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleCancel = () => {
    if (formGradeId) {
      const backUrl = safeRoutes.termsForFormGrade(formGradeId)
      router.push(backUrl)
    } else {
      router.push('/admin/forms-grades')
    }
  }

  // Show error if invalid form_grade_id
  if (error || !isValidFormGradeId) {
    return (
      <div className="container mx-auto py-6 px-4">
        <Alert className="max-w-2xl mx-auto">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            {error || 'Invalid form/grade ID provided in URL.'}
          </AlertDescription>
        </Alert>
        
        <div className="text-center mt-6 space-x-4">
          <Link href="/admin/forms-grades">
            <Button variant="outline">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Forms/Grades
            </Button>
          </Link>
          <Button variant="outline" onClick={() => window.location.reload()}>
            Reload Page
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-6 px-4">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Button 
            variant="ghost" 
            size="icon" 
            onClick={handleCancel}
          >
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              Create New Term
            </h1>
            <p className="text-gray-600 dark:text-gray-400">
              {loadingFormGrade ? (
                'Loading form/grade information...'
              ) : formGrade ? (
                `Add a new term for ${formGrade.name}`
              ) : (
                `Add a new term for Form/Grade ${formGradeId}`
              )}
            </p>
          </div>
        </div>
      </div>

      {/* Form Grade Info */}
      {formGrade && (
        <Card className="mb-6 max-w-2xl">
          <CardContent className="pt-6">
            <div className="flex items-center space-x-4">
              <div className="bg-blue-100 dark:bg-blue-900 p-2 rounded">
                <span className="text-blue-600 dark:text-blue-400 font-semibold">
                  {formGrade.code}
                </span>
              </div>
              <div>
                <h3 className="font-semibold">{formGrade.name}</h3>
                {formGrade.school_level && (
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    {formGrade.school_level.name}
                  </p>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Form Card */}
      <Card className="max-w-2xl">
        <CardHeader>
          <CardTitle>Term Information</CardTitle>
          <CardDescription>
            Fill in the details for the new term. The code will be automatically converted to uppercase.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              {/* Name Field */}
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Name *</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., Term 1, First Term, Spring Semester"
                        {...field}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <FormDescription>
                      The full name of the term
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Code Field */}
              <FormField
                control={form.control}
                name="code"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Code *</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., T1, TERM1, SPR"
                        {...field}
                        onChange={(e) => field.onChange(e.target.value.toUpperCase())}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <FormDescription>
                      A unique short code for the term (automatically converted to uppercase)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Date Fields */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="start_date"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Start Date</FormLabel>
                      <FormControl>
                        <Input
                          type="date"
                          {...field}
                          disabled={isSubmitting}
                        />
                      </FormControl>
                      <FormDescription>
                        When the term begins (optional)
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="end_date"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>End Date</FormLabel>
                      <FormControl>
                        <Input
                          type="date"
                          {...field}
                          disabled={isSubmitting}
                        />
                      </FormControl>
                      <FormDescription>
                        When the term ends (optional)
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              {/* Display Order Field */}
              <FormField
                control={form.control}
                name="display_order"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Display Order</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        min="0"
                        placeholder="0"
                        {...field}
                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <FormDescription>
                      Controls the order in which terms are displayed (0 = first)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Active Status Field */}
              <FormField
                control={form.control}
                name="is_active"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                        disabled={isSubmitting}
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel>
                        Active
                      </FormLabel>
                      <FormDescription>
                        Whether this term is currently active and available for use
                      </FormDescription>
                    </div>
                  </FormItem>
                )}
              />

              {/* Form Actions */}
              <div className="flex items-center justify-end space-x-4 pt-6">
                <Button
                  type="button"
                  variant="outline"
                  onClick={handleCancel}
                  disabled={isSubmitting}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isSubmitting}
                  className="min-w-[120px]"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Creating...
                    </>
                  ) : (
                    <>
                      <Save className="mr-2 h-4 w-4" />
                      Create Term
                    </>
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  )
}===== frontend/src/app/admin/topics/[id]/page.tsx =====
'use client'

import { useState, useEffect } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  BookOpen, 
  Search, 
  Plus, 
  ArrowLeft,
  Clock,
  Target,
  Eye,
  Edit,
  FileText
} from 'lucide-react'
import Link from 'next/link'
import { subjectApi, topicApi } from '@/lib/api'

interface Subject {
  id: number
  name: string
  code: string
  color: string
  term: {
    name: string
    form_grade: {
      name: string
      school_level: {
        name: string
      }
    }
  }
}

interface Topic {
  id: number
  title: string
  description: string
  duration_weeks: number
  learning_objectives: string[]
  display_order: number
  is_active: boolean
  subtopics_count: number
}

const SubjectTopicsPage = () => {
  const params = useParams()
  const router = useRouter()
  const subjectId = parseInt(params.id as string)
  
  const [subject, setSubject] = useState<Subject | null>(null)
  const [topics, setTopics] = useState<Topic[]>([])
  const [filteredTopics, setFilteredTopics] = useState<Topic[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState('all')

  useEffect(() => {
    if (subjectId) {
      fetchSubject()
      fetchTopics()
    }
  }, [subjectId])

  useEffect(() => {
    filterTopics()
  }, [topics, searchTerm, statusFilter])

  const fetchSubject = async () => {
    try {
      const response = await subjectApi.get(subjectId)
      setSubject(response.data)
    } catch (error) {
      console.error('Error fetching subject:', error)
    }
  }

  const fetchTopics = async () => {
    try {
      const response = await topicApi.getBySubject(subjectId)
      setTopics(response.data || [])
    } catch (error) {
      console.error('Error fetching topics:', error)
    } finally {
      setLoading(false)
    }
  }

  const filterTopics = () => {
    let filtered = topics

    if (searchTerm) {
      filtered = filtered.filter(topic => 
        topic.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        topic.description.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    if (statusFilter === 'active') {
      filtered = filtered.filter(topic => topic.is_active)
    } else if (statusFilter === 'inactive') {
      filtered = filtered.filter(topic => !topic.is_active)
    }

    setFilteredTopics(filtered.sort((a, b) => a.display_order - b.display_order))
  }

  const handleTopicClick = (topicId: number) => {
    router.push(`/admin/topics/${topicId}/subtopics`)
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  return (
    <div className="container mx-auto p-6 max-w-7xl">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center space-x-4 mb-4">
          <Button variant="ghost" size="sm" asChild>
            <Link href="/admin/subjects">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Subjects
            </Link>
          </Button>
        </div>
        
        {subject && (
          <div className="flex items-center space-x-4">
            <div 
              className="w-12 h-12 rounded-lg flex items-center justify-center text-white font-bold text-lg"
              style={{ backgroundColor: subject.color }}
            >
              {subject.code}
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">{subject.name}</h1>
              <p className="text-gray-600">
                {subject.term.form_grade.name} • {subject.term.name} • {subject.term.form_grade.school_level.name}
              </p>
            </div>
          </div>
        )}
      </div>

      {/* Controls */}
      <div className="flex flex-col md:flex-row gap-4 mb-6">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search topics..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
        
        <Select value={statusFilter} onValueChange={setStatusFilter}>
          <SelectTrigger className="w-full md:w-48">
            <SelectValue placeholder="Filter by status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Topics</SelectItem>
            <SelectItem value="active">Active Only</SelectItem>
            <SelectItem value="inactive">Inactive Only</SelectItem>
          </SelectContent>
        </Select>

        <Button asChild>
          <Link href={`/admin/topics/new?subject_id=${subjectId}`}>
            <Plus className="h-4 w-4 mr-2" />
            Add Topic
          </Link>
        </Button>
      </div>

      {/* Topics List */}
      {filteredTopics.length === 0 ? (
        <Card>
          <CardContent className="text-center py-12">
            <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-900 mb-2">No Topics Found</h3>
            <p className="text-gray-600 mb-6">
              {searchTerm ? 'No topics match your search.' : 'Start by adding your first topic.'}
            </p>
            <Button asChild>
              <Link href={`/admin/topics/new?subject_id=${subjectId}`}>
                <Plus className="h-4 w-4 mr-2" />
                Add First Topic
              </Link>
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className="grid gap-4">
          {filteredTopics.map((topic) => (
            <Card 
              key={topic.id} 
              className="hover:shadow-md transition-shadow cursor-pointer"
              onClick={() => handleTopicClick(topic.id)}
            >
              <CardHeader className="pb-3">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-2">
                      <CardTitle className="text-lg">{topic.title}</CardTitle>
                      <Badge variant={topic.is_active ? "default" : "secondary"}>
                        {topic.is_active ? 'Active' : 'Inactive'}
                      </Badge>
                    </div>
                    <CardDescription className="text-sm">
                      {topic.description}
                    </CardDescription>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation()
                        router.push(`/admin/topics/${topic.id}/edit`)
                      }}
                    >
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation()
                        router.push(`/admin/topics/${topic.id}`)
                      }}
                    >
                      <Eye className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>
              
              <CardContent>
                <div className="flex items-center justify-between text-sm text-gray-600">
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center space-x-1">
                      <Clock className="h-4 w-4" />
                      <span>{topic.duration_weeks} weeks</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <FileText className="h-4 w-4" />
                      <span>{topic.subtopics_count} subtopics</span>
                    </div>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Target className="h-4 w-4" />
                    <span>{topic.learning_objectives.length} objectives</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  )
}

export default SubjectTopicsPage===== frontend/src/app/admin/topics/page.tsx =====
'use client'

import { useState, useEffect } from 'react'
import { useSearchParams } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  FileText, 
  Plus, 
  Search, 
  BookOpen,
  Calendar,
  GraduationCap,
  Eye,
  Edit,
  Trash2,
  Clock,
  Target,
  Users,
  AlertCircle,
  ArrowLeft,
  List
} from 'lucide-react'
import Link from 'next/link'
import { topicApi, subjectApi } from '@/lib/api'

interface Subject {
  id: number
  name: string
  code: string
  color: string
  term: {
    id: number
    name: string
    form_grade: {
      id: number
      name: string
      school_level: {
        id: number
        name: string
      }
    }
  }
  is_active: boolean
}

interface Topic {
  id: number
  title: string
  description: string
  learning_objectives: string[]
  duration_weeks: number
  display_order: number
  subject_id: number
  is_active: boolean
  created_at: string
  updated_at: string
  subject?: Subject
  subtopics_count?: number
}

const TopicsPage = () => {
  const searchParams = useSearchParams()
  const preSelectedSubjectId = searchParams.get('subject_id')
  
  const [subjects, setSubjects] = useState<Subject[]>([])
  const [topics, setTopics] = useState<Topic[]>([])
  const [selectedSubjectId, setSelectedSubjectId] = useState<number | null>(
    preSelectedSubjectId ? parseInt(preSelectedSubjectId) : null
  )
  const [filteredTopics, setFilteredTopics] = useState<Topic[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [activeTab, setActiveTab] = useState('all')

  useEffect(() => {
    fetchSubjects()
    fetchTopics()
  }, [])

  useEffect(() => {
    filterTopics()
  }, [topics, selectedSubjectId, searchTerm, activeTab])

  const fetchSubjects = async () => {
    try {
      const response = await subjectApi.getAll()
      setSubjects(response.data || [])
    } catch (error) {
      console.error('Error fetching subjects:', error)
    }
  }

  const fetchTopics = async () => {
    try {
      const response = await topicApi.getAll()
      setTopics(response.data || [])
    } catch (error) {
      console.error('Error fetching topics:', error)
    } finally {
      setLoading(false)
    }
  }

  const filterTopics = () => {
    let filtered = topics

    // Filter by selected subject
    if (selectedSubjectId) {
      filtered = filtered.filter(topic => topic.subject_id === selectedSubjectId)
    }

    // Filter by search term
    if (searchTerm) {
      filtered = filtered.filter(topic => 
        topic.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        topic.description?.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    // Filter by active status
    if (activeTab === 'active') {
      filtered = filtered.filter(topic => topic.is_active)
    } else if (activeTab === 'inactive') {
      filtered = filtered.filter(topic => !topic.is_active)
    }

    setFilteredTopics(filtered)
  }

  const handleDeleteTopic = async (id: number) => {
    if (confirm('Are you sure you want to delete this topic?')) {
      try {
        await topicApi.delete(id)
        fetchTopics()
      } catch (error) {
        console.error('Error deleting topic:', error)
      }
    }
  }

  const getSelectedSubject = () => {
    return subjects.find(subject => subject.id === selectedSubjectId)
  }

  const TopicCard = ({ topic }: { topic: Topic }) => (
    <Card className="group hover:shadow-lg transition-all duration-300 border-l-4" 
          style={{ borderLeftColor: topic.subject?.color || '#3B82F6' }}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 rounded-lg flex items-center justify-center text-white text-sm font-bold"
                 style={{ backgroundColor: topic.subject?.color || '#3B82F6' }}>
              <FileText className="w-6 h-6" />
            </div>
            <div>
              <CardTitle className="text-lg">{topic.title}</CardTitle>
              <CardDescription className="text-sm">
                Subject: {topic.subject?.name}
              </CardDescription>
            </div>
          </div>
          <Badge variant={topic.is_active ? "default" : "secondary"}>
            {topic.is_active ? 'Active' : 'Inactive'}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <p className="text-sm text-gray-600 line-clamp-2">
            {topic.description || 'No description available'}
          </p>
          
          <div className="flex items-center space-x-4 text-sm text-gray-500">
            <div className="flex items-center space-x-1">
              <Clock className="w-4 h-4" />
              <span>{topic.duration_weeks} weeks</span>
            </div>
            <div className="flex items-center space-x-1">
              <Target className="w-4 h-4" />
              <span>{topic.learning_objectives?.length || 0} objectives</span>
            </div>
            <div className="flex items-center space-x-1">
              <List className="w-4 h-4" />
              <span>{topic.subtopics_count || 0} subtopics</span>
            </div>
          </div>

          <div className="flex items-center justify-between pt-3 border-t">
            <div className="flex space-x-2">
              <Link href={`/admin/topics/${topic.id}`}>
                <Button variant="outline" size="sm">
                  <Eye className="w-4 h-4 mr-1" />
                  View
                </Button>
              </Link>
              <Link href={`/admin/subtopics/new?topic_id=${topic.id}`}>
                <Button size="sm" className="bg-green-600 hover:bg-green-700">
                  <Plus className="w-4 h-4 mr-1" />
                  Add Subtopics
                </Button>
              </Link>
            </div>
            <div className="flex space-x-1">
              <Link href={`/admin/topics/${topic.id}/edit`}>
                <Button variant="outline" size="sm">
                  <Edit className="w-4 h-4" />
                </Button>
              </Link>
              <Button 
                variant="destructive" 
                size="sm"
                onClick={() => handleDeleteTopic(topic.id)}
              >
                <Trash2 className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    )
  }

  const selectedSubject = getSelectedSubject()

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Link href="/admin/subjects">
            <Button variant="outline" size="sm">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Subjects
            </Button>
          </Link>
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Topics</h1>
            <p className="text-gray-600">Manage curriculum topics and learning objectives</p>
          </div>
        </div>
        <Link href="/admin/topics/new">
          <Button className="bg-blue-600 hover:bg-blue-700">
            <Plus className="w-4 h-4 mr-2" />
            Add Topic
          </Button>
        </Link>
      </div>

      {/* Subject Selection */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <BookOpen className="w-5 h-5" />
            <span>Select Subject</span>
          </CardTitle>
          <CardDescription>
            Choose a subject to view and manage its topics
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Select value={selectedSubjectId?.toString() || ''} onValueChange={(value) => setSelectedSubjectId(value ? parseInt(value) : null)}>
              <SelectTrigger>
                <SelectValue placeholder="Select a subject..." />
              </SelectTrigger>
              <SelectContent>
                {subjects.map((subject) => (
                  <SelectItem key={subject.id} value={subject.id.toString()}>
                    <div className="flex items-center space-x-2">
                      <div 
                        className="w-4 h-4 rounded"
                        style={{ backgroundColor: subject.color }}
                      />
                      <div className="flex flex-col">
                        <span className="font-medium">{subject.name} ({subject.code})</span>
                        <span className="text-sm text-gray-500">
                          {subject.term?.name} - {subject.term?.form_grade?.name}
                        </span>
                      </div>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            {selectedSubject && (
              <div className="p-4 rounded-lg border-2" 
                   style={{ borderColor: selectedSubject.color, backgroundColor: `${selectedSubject.color}10` }}>
                <h3 className="font-semibold" style={{ color: selectedSubject.color }}>
                  {selectedSubject.name}
                </h3>
                <p className="text-sm text-gray-700">
                  {selectedSubject.term?.name} - {selectedSubject.term?.form_grade?.name}
                </p>
                <p className="text-xs text-gray-600 mt-1">
                  {filteredTopics.length} topics in this subject
                </p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Search and Filters */}
      {selectedSubjectId && (
        <Card>
          <CardContent className="pt-6">
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Search topics in this subject..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <Link href={`/admin/topics/new?subject_id=${selectedSubjectId}`}>
                <Button>
                  <Plus className="w-4 h-4 mr-2" />
                  Add Topic to {selectedSubject?.name}
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Content */}
      {!selectedSubjectId ? (
        <Card>
          <CardContent className="pt-6">
            <div className="text-center py-12">
              <BookOpen className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Select a Subject First</h3>
              <p className="text-gray-600 mb-4">
                Choose a subject from the dropdown above to view and manage its topics
              </p>
            </div>
          </CardContent>
        </Card>
      ) : filteredTopics.length === 0 ? (
        <Card>
          <CardContent className="pt-6">
            <div className="text-center py-12">
              <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No Topics Found</h3>
              <p className="text-gray-600 mb-4">
                {searchTerm 
                  ? `No topics match "${searchTerm}" in ${selectedSubject?.name}`
                  : `${selectedSubject?.name} doesn't have any topics yet`
                }
              </p>
              <Link href={`/admin/topics/new?subject_id=${selectedSubjectId}`}>
                <Button>
                  <Plus className="w-4 h-4 mr-2" />
                  Add First Topic
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-4">
          {/* Subject Context Header */}
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              Showing {filteredTopics.length} topics for <strong>{selectedSubject?.name}</strong> 
              ({selectedSubject?.term?.name} - {selectedSubject?.term?.form_grade?.name})
            </AlertDescription>
          </Alert>

          {/* Tabs */}
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="all">All Topics ({filteredTopics.length})</TabsTrigger>
              <TabsTrigger value="active">Active ({filteredTopics.filter(t => t.is_active).length})</TabsTrigger>
              <TabsTrigger value="inactive">Inactive ({filteredTopics.filter(t => !t.is_active).length})</TabsTrigger>
            </TabsList>

            <TabsContent value={activeTab} className="space-y-4">
              {/* Topics Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredTopics.map((topic) => (
                  <TopicCard key={topic.id} topic={topic} />
                ))}
              </div>
            </TabsContent>
          </Tabs>

          {/* Subject Summary */}
          <Card>
            <CardContent className="pt-6">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">{filteredTopics.length}</div>
                  <div className="text-sm text-gray-600">Total Topics</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">
                    {filteredTopics.filter(t => t.is_active).length}
                  </div>
                  <div className="text-sm text-gray-600">Active</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">
                    {filteredTopics.reduce((sum, t) => sum + t.duration_weeks, 0)}
                  </div>
                  <div className="text-sm text-gray-600">Total Weeks</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-600">
                    {filteredTopics.reduce((sum, t) => sum + (t.subtopics_count || 0), 0)}
                  </div>
                  <div className="text-sm text-gray-600">Total Subtopics</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}

export default TopicsPage===== frontend/src/app/admin/topics/new/page.tsx =====
'use client'

import { useState, useEffect } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Badge } from '@/components/ui/badge'
import { 
  ArrowLeft, 
  Save, 
  BookOpen,
  Target,
  Clock,
  Plus,
  Trash2,
  AlertCircle,
  CheckCircle2
} from 'lucide-react'
import Link from 'next/link'
import { topicApi, subjectApi } from '@/lib/api'

interface Subject {
  id: number
  name: string
  code: string
  color: string
  term: {
    id: number
    name: string
    form_grade: {
      id: number
      name: string
      school_level: {
        id: number
        name: string
      }
    }
  }
  is_active: boolean
}

const CreateTopicPage = () => {
  const router = useRouter()
  const searchParams = useSearchParams()
  const preselectedSubjectId = searchParams.get('subject_id')

  const [subjects, setSubjects] = useState<Subject[]>([])
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [errors, setErrors] = useState<Record<string, string>>({})

  const [formData, setFormData] = useState({
    title: '',
    description: '',
    learning_objectives: [''],
    duration_weeks: 1,
    display_order: 0,
    subject_id: preselectedSubjectId ? parseInt(preselectedSubjectId) : null as number | null,
    is_active: true
  })

  useEffect(() => {
    fetchSubjects()
  }, [])

  const fetchSubjects = async () => {
    try {
      const response = await subjectApi.getAll()
      setSubjects(response.data || [])
    } catch (error) {
      console.error('Error fetching subjects:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }))
    }
  }

  const handleObjectiveChange = (index: number, value: string) => {
    const newObjectives = [...formData.learning_objectives]
    newObjectives[index] = value
    setFormData(prev => ({ ...prev, learning_objectives: newObjectives }))
  }

  const addObjective = () => {
    setFormData(prev => ({
      ...prev,
      learning_objectives: [...prev.learning_objectives, '']
    }))
  }

  const removeObjective = (index: number) => {
    if (formData.learning_objectives.length > 1) {
      const newObjectives = formData.learning_objectives.filter((_, i) => i !== index)
      setFormData(prev => ({ ...prev, learning_objectives: newObjectives }))
    }
  }

  const validateForm = () => {
    const newErrors: Record<string, string> = {}

    if (!formData.title.trim()) newErrors.title = 'Topic title is required'
    if (!formData.subject_id) newErrors.subject_id = 'Please select a subject'
    if (formData.duration_weeks < 1) newErrors.duration_weeks = 'Duration must be at least 1 week'
    
    // Check if at least one objective has content
    const hasValidObjective = formData.learning_objectives.some(obj => obj.trim().length > 0)
    if (!hasValidObjective) {
      newErrors.learning_objectives = 'At least one learning objective is required'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) return

    setSaving(true)
    try {
      // Filter out empty objectives
      const cleanedData = {
        ...formData,
        learning_objectives: formData.learning_objectives.filter(obj => obj.trim().length > 0)
      }

      const response = await topicApi.create(cleanedData)
      if (response.success) {
        router.push('/admin/topics')
      } else {
        setErrors({ submit: response.message || 'Failed to create topic' })
      }
    } catch (error: any) {
      setErrors({ submit: error.message || 'Network error. Please try again.' })
    } finally {
      setSaving(false)
    }
  }

  const getSelectedSubject = () => {
    return subjects.find(subject => subject.id === formData.subject_id)
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    )
  }

  const selectedSubject = getSelectedSubject()

  return (
    <div className="max-w-4xl mx-auto space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center space-x-4">
        <Link href="/admin/topics">
          <Button variant="outline" size="sm">
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Topics
          </Button>
        </Link>
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Create New Topic</h1>
          <p className="text-gray-600">Add a curriculum topic with learning objectives</p>
        </div>
      </div>

      {/* Pre-selected Subject Alert */}
      {preselectedSubjectId && selectedSubject && (
        <Alert className="border-green-200 bg-green-50">
          <CheckCircle2 className="h-4 w-4 text-green-600" />
          <AlertDescription className="text-green-800">
            Creating topic for <strong>{selectedSubject.name}</strong> 
            ({selectedSubject.term?.name} - {selectedSubject.term?.form_grade?.name})
          </AlertDescription>
        </Alert>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Left Column - Basic Info */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <BookOpen className="w-5 h-5" />
                  <span>Basic Information</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Subject Selection */}
                <div className="space-y-2">
                  <Label htmlFor="subject_id">Subject *</Label>
                  <Select 
                    value={formData.subject_id?.toString() || ''} 
                    onValueChange={(value) => handleInputChange('subject_id', parseInt(value))}
                    disabled={!!preselectedSubjectId}
                  >
                    <SelectTrigger className={errors.subject_id ? 'border-red-500' : ''}>
                      <SelectValue placeholder="Select a subject..." />
                    </SelectTrigger>
                    <SelectContent>
                      {subjects.map((subject) => (
                        <SelectItem key={subject.id} value={subject.id.toString()}>
                          <div className="flex items-center space-x-2">
                            <div 
                              className="w-4 h-4 rounded"
                              style={{ backgroundColor: subject.color }}
                            />
                            <div className="flex flex-col">
                              <span className="font-medium">{subject.name} ({subject.code})</span>
                              <span className="text-sm text-gray-500">
                                {subject.term?.name} - {subject.term?.form_grade?.name}
                              </span>
                            </div>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  {errors.subject_id && <p className="text-sm text-red-500">{errors.subject_id}</p>}
                </div>

                {/* Topic Title */}
                <div className="space-y-2">
                  <Label htmlFor="title">Topic Title *</Label>
                  <Input
                    id="title"
                    value={formData.title}
                    onChange={(e) => handleInputChange('title', e.target.value)}
                    placeholder="e.g., Fractions and Decimals, Photosynthesis"
                    className={errors.title ? 'border-red-500' : ''}
                  />
                  {errors.title && <p className="text-sm text-red-500">{errors.title}</p>}
                </div>

                {/* Description */}
                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    placeholder="Brief description of what this topic covers..."
                    rows={3}
                  />
                </div>

                {/* Duration and Order */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="duration_weeks">Duration (weeks) *</Label>
                    <Input
                      id="duration_weeks"
                      type="number"
                      value={formData.duration_weeks}
                      onChange={(e) => handleInputChange('duration_weeks', parseInt(e.target.value) || 1)}
                      min="1"
                      max="52"
                      className={errors.duration_weeks ? 'border-red-500' : ''}
                    />
                    {errors.duration_weeks && <p className="text-sm text-red-500">{errors.duration_weeks}</p>}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="display_order">Display Order</Label>
                    <Input
                      id="display_order"
                      type="number"
                      value={formData.display_order}
                      onChange={(e) => handleInputChange('display_order', parseInt(e.target.value) || 0)}
                      min="0"
                      placeholder="0"
                    />
                    <p className="text-sm text-gray-500">Lower numbers appear first</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Right Column - Learning Objectives */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Target className="w-5 h-5" />
                  <span>Learning Objectives</span>
                </CardTitle>
                <CardDescription>
                  Define what students should learn from this topic
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {formData.learning_objectives.map((objective, index) => (
                  <div key={index} className="space-y-2">
                    <div className="flex items-center justify-between">
                      <Label htmlFor={`objective-${index}`}>
                        Objective {index + 1}
                        {index === 0 && <span className="text-red-500 ml-1">*</span>}
                      </Label>
                      {formData.learning_objectives.length > 1 && (
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => removeObjective(index)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      )}
                    </div>
                    <Textarea
                      id={`objective-${index}`}
                      value={objective}
                      onChange={(e) => handleObjectiveChange(index, e.target.value)}
                      placeholder="Students will be able to..."
                      rows={2}
                      className={errors.learning_objectives && index === 0 && !objective.trim() ? 'border-red-500' : ''}
                    />
                  </div>
                ))}

                {errors.learning_objectives && (
                  <p className="text-sm text-red-500">{errors.learning_objectives}</p>
                )}

                <Button
                  type="button"
                  variant="outline"
                  onClick={addObjective}
                  className="w-full"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Add Another Objective
                </Button>

                {/* Preview */}
                {selectedSubject && (
                  <div className="space-y-2">
                    <Label>Preview</Label>
                    <div className="p-4 border rounded-lg bg-gray-50">
                      <div className="flex items-center space-x-3 mb-3">
                        <div 
                          className="w-8 h-8 rounded flex items-center justify-center text-white"
                          style={{ backgroundColor: selectedSubject.color }}
                        >
                          <Target className="w-4 h-4" />
                        </div>
                        <div>
                          <div className="font-semibold">{formData.title || 'Topic Title'}</div>
                          <div className="text-sm text-gray-500">{selectedSubject.name}</div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-4 text-sm text-gray-600">
                        <span className="flex items-center">
                          <Clock className="w-3 h-3 mr-1" />
                          {formData.duration_weeks} weeks
                        </span>
                        <span className="flex items-center">
                          <Target className="w-3 h-3 mr-1" />
                          {formData.learning_objectives.filter(obj => obj.trim()).length} objectives
                        </span>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Submit Errors */}
        {errors.submit && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{errors.submit}</AlertDescription>
          </Alert>
        )}

        {/* Actions */}
        <div className="flex items-center justify-between pt-6 border-t">
          <Link href="/admin/topics">
            <Button variant="outline" type="button">
              Cancel
            </Button>
          </Link>
          <Button type="submit" disabled={saving} className="bg-blue-600 hover:bg-blue-700">
            {saving ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Creating...
              </>
            ) : (
              <>
                <Save className="w-4 h-4 mr-2" />
                Create Topic
              </>
            )}
          </Button>
        </div>
      </form>
    </div>
  )
}

export default CreateTopicPage===== frontend/src/app/admin/test-subject-nav/page.tsx =====
'use client'

import Link from 'next/link'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { ExternalLink, BookOpen } from 'lucide-react'
import { safeRoutes } from '@/lib/safe-links'

export default function SubjectNavigationTestPage() {
  const testScenarios = [
    {
      title: 'Subjects for Term 1',
      url: safeRoutes.subjectsForTerm(1),
      description: 'Should load subjects page with term_id=1 parameter'
    },
    {
      title: 'Subjects for Term 2',
      url: safeRoutes.subjectsForTerm(2),
      description: 'Should load subjects page with term_id=2 parameter'
    },
    {
      title: 'New Subject for Term 1',
      url: safeRoutes.newSubjectForTerm(1),
      description: 'Should load new subject form for term_id=1'
    },
    {
      title: 'New Subject for Term 2',
      url: safeRoutes.newSubjectForTerm(2),
      description: 'Should load new subject form for term_id=2'
    },
    {
      title: 'General Subjects Page',
      url: '/admin/subjects',
      description: 'Should show term selector (no term_id parameter)'
    }
  ]

  return (
    <div className="container mx-auto py-6 px-4">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          Subject Navigation Testing
        </h1>
        <p className="text-gray-600 dark:text-gray-400">
          Test navigation to subjects pages with different term parameters
        </p>
      </div>

      <div className="grid gap-4 md:grid-cols-1 max-w-2xl">
        {testScenarios.map((scenario, index) => (
          <Card key={index} className="hover:border-blue-200 transition-colors">
            <CardHeader className="pb-3">
              <CardTitle className="text-lg flex items-center">
                <BookOpen className="mr-2 h-5 w-5" />
                {scenario.title}
              </CardTitle>
              <CardDescription>{scenario.description}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <code className="block bg-gray-100 dark:bg-gray-800 p-2 rounded text-sm break-all">
                  {scenario.url}
                </code>
                <Link href={scenario.url}>
                  <Button variant="outline" className="w-full">
                    <ExternalLink className="mr-2 h-4 w-4" />
                    Test This Navigation
                  </Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
      
      <div className="mt-8 max-w-2xl">
        <Card className="border-blue-200 bg-blue-50">
          <CardHeader>
            <CardTitle className="text-blue-800">🎯 Expected Behavior</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2 text-sm text-blue-700">
              <li>• <strong>Term-specific links:</strong> Should go directly to subjects for that term</li>
              <li>• <strong>General subjects link:</strong> Should show term selector dropdown</li>
              <li>• <strong>New subject links:</strong> Should pre-populate the term and show form</li>
              <li>• <strong>No manual term selection:</strong> When coming from terms page, should auto-load</li>
            </ul>
          </CardContent>
        </Card>
      </div>
      
      <div className="mt-4 max-w-2xl">
        <Card className="border-yellow-200 bg-yellow-50">
          <CardHeader>
            <CardTitle className="text-yellow-800">🔧 Debugging Tips</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2 text-sm text-yellow-700">
              <li>• Check browser console for navigation logs and errors</li>
              <li>• Verify URL parameters are being passed correctly</li>
              <li>• Make sure the subjects page files exist in the correct locations</li>
              <li>• Check that the term_id is being validated and parsed properly</li>
            </ul>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}